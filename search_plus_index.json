{"./":{"url":"./","title":"简介","keywords":"","body":"note 学习笔记 2017 -  by 王顶. All rights reserved.本站访客人数  人次document.getElementsByClassName(\"bsz-this-year\")[0].innerHTML = new Date().getFullYear(); window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"5f2010891d3a1e43daad\",\"clientSecret\":\"0f1589253938ab880568105760d6cdbd07da96a6\",\"repo\":\"note\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"note\"],\"id\":\"/README.html\"});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"5f2010891d3a1e43daad\",\"clientSecret\":\"0f1589253938ab880568105760d6cdbd07da96a6\",\"repo\":\"note\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"note\"],\"id\":\"/README.html\"});gitalk.render(\"gitalk-container\"); "},"fe-roadmap.html":{"url":"fe-roadmap.html","title":"前端开发学习路线图","keywords":"","body":"前端开发学习路线 前端开发学习路线图中提供了一些学习材料，基本上都是英文的文档和视频。本文档对这些学习材料进行补充和替换。 HTTP 协议 HTTP 教程 浏览器工作原理 现代浏览器内部揭秘：第一部分 现代浏览器内部揭秘：第二部分 现代浏览器内部揭秘：第三部分 现代浏览器内部揭秘：第四部分 浏览器的工作原理：新式网络浏览器幕后揭秘 DNS 笨办法学 Linux：DNS 基础微课 22 讲。第 12 课之后是 BIND DNS 服务器的配置和管理，适合运维工程师学习，开发工程师可以选学。 01-什么是友好名称？ 02-域名空间结构 03-域名服务器分类 04-DNS客户端 05-域名解析工作原理 06-Zone和资源记录 07-DNS的思维导图 08-BIND DNS的安装 09-nslookup命令 10-host命令 11-dig命令 12-最简单的Cache-Only服务器 13-与IPv6有关的排错 14-BIND常用配置参数 15-实现正向查询区域1 16-实现正向查询区域2 17-实现正向查询区域3 18-实现反向查询区域 19-实现区域传递1 20-实现区域传递2 21-实现区域传递3 22-BIND DNS服务器的备份与恢复 知乎文章：DNS cache 是什么？。这个文章中介绍了：操作系统的 DNS 缓存和浏览器的 DNS 缓存。操作系统的 DNS 缓存，上面的视频都介绍到了。浏览器的 DNS 缓存，可以了解一下。 2017 -  by 王顶. All rights reserved.本站访客人数  人次document.getElementsByClassName(\"bsz-this-year\")[0].innerHTML = new Date().getFullYear(); window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"5f2010891d3a1e43daad\",\"clientSecret\":\"0f1589253938ab880568105760d6cdbd07da96a6\",\"repo\":\"note\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"note\"],\"id\":\"/fe-roadmap.html\"});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"5f2010891d3a1e43daad\",\"clientSecret\":\"0f1589253938ab880568105760d6cdbd07da96a6\",\"repo\":\"note\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"note\"],\"id\":\"/fe-roadmap.html\"});gitalk.render(\"gitalk-container\"); "},"office/vim.html":{"url":"office/vim.html","title":"vim","keywords":"","body":"vim 模式化的编辑器。 打开文件 vim [option] [file] +# 打开文件后，光标处于第#行的行首 +/pattern 打开文件后，直接让光标处于第一个被/pattern匹配到的行的行首 +打开文件后，在尾行追加 :e 打开一个文件 :e 刷新或重载当前的文件 转换模式 模式种类： 编辑模式：默认模式 输入模式 命令模式 可视模式（块选模式） 模式转换： 输入模式-->编辑模式：ESC 编辑模式-->命令模式：: 命令模式-->编辑模式：ESC 默认模式-->可视模式：v 字符选择，V 行选择，ctrl+v 块选择 编辑模式-->输入模式 i：insert 在光标所在处输入 a：append 在光标的处后方输入 o：在光标所在处的下方打开一个新行 cw: 替换光标所在位置单词 I：在光标所在行的行首输入 A：在光标所在行的行尾输入 O：在光标所在处的上方打开一个新行 关闭文件 ZZ 保存并退出 :q 退出，前提文件没有修改 :q! 强制退出，不保存此前的修改 :wq 保存并退出 :x 保存并退出 :w /path/file 另存为 :saveas 另存为 跳转光标 字符间跳转 h, l, 左右 j, k, 上下 #cmd 跳 # 个字符 单词间跳转 w, 下一个单词的词首 e, 光标向前移动到词尾 b, 光标向后移动到词首 #cmd 跳 # 个单词 行首尾跳转 0 行首 ^ 非空白行首 $ 行尾 行间跳转 gg, 1G 到首行 G 到末行 nG, ngg 到第 n 行 句间跳转 ) 下一句 ( 前一句 段间跳转 } 下一段落 { } 其他跳转 g; 跳到上一次修改的地方 L 光标跳到屏幕下方 ctrl-O 执行后退 ctrl-I 执行前进 :n 命令模式跳转到第 n 行 % 匹配括号 * 和 # 匹配光标所在的单词，* 移到上一个匹配的单词处，# 移动到下一个单词处 gj, gk 在软换行的情况下在行中上下移动光标 滚动窗口 ctrl-d 窗口向下滚动半屏 ctrl-u 窗口向上滚动半屏 ctrl-e 窗口向下滚动一行 ctrl-y 窗口向上滚动一行 ctrl-b 窗口向上滚动一页 ctrl-f 窗口向下滚动一页 zz 当前行位于屏幕窗口中间 zt 当前行位于屏幕窗口顶部 zb 当前行位于屏幕窗口底部 操作多窗口 vim -o file1 file2 (水平分隔) vim -O file1 file2 (垂直分隔) :sp filename (水平分隔窗口，编辑文件) :vs filename (垂直分隔窗口，编辑文件) 关闭分割窗口 :q 切换窗口 切换到普通模式下 ctrl + w w ctrl w + 先按 ctrl w，然后再按 + ，放大窗口 ctrl w - 先按 ctrl w，然后再按 -，缩小窗口 :close 关闭窗口 ctrl w j,k,l,m 切换到上下左右的窗口 :Ex 开启目录浏览器，可以浏览目录的所有文件并选择打开 :resize+num 把当前窗口增加 num 行 :resize-num 把当前窗口减少 num 行 :vertical resize+num 把当前窗口增加 num 列 :vertical resize-num 把当前窗口减少 num 列 :ls 显示所有打开的文档 撤销操作 u 撤销操作 ctrl-r 恢复撤销 vim 设置 开启粘贴模式：set paste // 粘贴的代码缩进和注释不会乱 关闭粘贴模式：set nopaste 显示行号：set number 关闭自动缩进：set noai // set no auto indent 关闭智能缩进: set nosi // set no smart indent 开启相对行号：set relativenumber 优势如下： 高效。如果代码比较长，比如当前的光标在 700 行处，因为跳转都是局部和小范围内的跳转，也就是在一个屏幕窗口的可是范围内跳转。使用绝对行号跳转是 705G，而使用相对行号就是 5j，可见敲击按键的次数少一些。 代码块操作。对一块连续的代码块进行复制或者缩进，等操作时，块的起始位置到终止位置光标的移动用相对行号会非常方便。跟上面的类似，例如：700 行处，V 整行选中作为代码块的起始行，705G作为代码块的终止行，这是绝对行号操作方式。而相对行号，V，5j，显然按键次数更少一些。 开启代码折叠：set fdm = method，下面是六种折叠方式 manual 手工定义折叠 indent 缩进代表折叠 expr 表达式代表折叠 syntax 语法高亮来定义折叠 diff 没有变更的文本进行折叠 marker 文中的标示折叠 折叠代码 前提是开启代码折叠，下列按键才起作用。 zc 折叠当前代码 zo 打开当前折叠 zm 关闭所有折叠 zr 打开所有折叠 执行命令 :!command :!bash 创新启动一个 bash 执行命令，而没有退出 vim，执行完命令后 exit 回到 vim :r !command 将命令运行的结果插入到当前行的下一行 :n,m !command 起始行号 n 到结束行号 m 之间的内容，用 command 来处理。例如：:2,4 !sort 复制和移动 yy 复制一行 查找替换 普通查找替换 :s/old/new 替换行中首次出现的 old 为 new :s/old/new/g 替换行中所有 old 为 new :n,m s/old/new/g 用 new 替换 从 n 行到 m 行中的所有 old :%s/old/new/g 全文查找 old 替换成 new g 后跟 c 进行替换前的确认 批量查找替换 打开若干个文件，例如：vi *.html 查看当前打开的文件：:args 在所有打开的文件中批量查找替换：argdo %s/old/new/g 退出 vim 验证是否修改正确，用命令：git diff 多文件操作 vi *.js 同时打开多个文件 :ls 查看当前打开的文件 :b num 切换到第几个文件 常用命令 :open file 打开文件 file :bn 下一个文件 :bp 上一个文件 Ctrl + 6 下一个文件 :n1,n2 co n3 将 n1 到 n2 行的内容复制到 n3 行下 :n1,n2 m m3 将 n1 到 n2 行的内容移动到 n3 行下 :n1,n2 !command 将 n1 到 n2 行的内容作为 command 命令的输入并执行，执行的结果放到 n1 行的位置 :n1,n2 d 将 n1 到 n2 行的内容删除 录制宏 qa 启动录制宏 a 操作 q 停止录制宏 @a 或者 @@ 执行宏 a 或者执行最新的宏 100@@ 执行 100 次最近的宏 操作 i 和 a 区域对象 i 代表 in a 代表 around 语法：i/a 动作有： v 选中 d 删除 y 复制 区域范围有： i 代表 in a 代表 around 对象范围有： w 单词 s 句子 p 段落 也可以是一些范围界定符号，例如：逗号，括号，等 参考：http://blog.jobbole.com/18339 操作块 操作流程如下： ctrl-v 块的起始位置 向上或向下移动光标 I 大写字母 I，代表插入操作 或者行尾操作，$，A，内容 插入的内容，如：空格或前导符 - ESC 退出插入操作，块的位置都会插入 缩进代码 操作流程如下： V 进入整行的可视操作模式 向上或向下移动光标 进行左右缩进 = 自动缩进，自动缩进就是把代码复制到其他的位置之后，使用自动缩进，一步把代码的缩进调整到位 vim 插件管理工具 Vundle 安装 Vundlemkdir -p ~/.vim/bundle cd ~/.vim/bundle git clone https://github.com/VundleVim/Vundle.vim.git 配置 .vimrc，直接从 wangding/tools 仓库中复制 .vimrc 文件，文件中已经配好了常用的插件 安装插件，在 vim 应用中运行 :PluginInstall 打造 vim IDE 基本的文章参考：http://efe.baidu.com/blog/vim-javascript-completion/ ternjs/tern_for_vim 安装 nodejs 环境 在插件的目录下运行 npm install 安装 tern 插件需要的 node module 依赖 在每个项目代码目录下创建 .tern-project 文件，描述项目中需要用到的模块 .tern-project 配置文件很关键，配置好了才能完成代码补全 Valloric/YouCompleteMe 安装：使用 Vundle 下载 YCM 插件 在 YCM 文件夹下执行 install.py --tern-completer，可以打造成一个 JavaScript 开发环境 在 YCM 文件夹下执行 install.py --clang-completer，没有搞定 配置 .vimrc 的 -gf 跳转到定义处 jiangmiao/auto-pairs 安装之后直接可用，不用进行配置 wincent/command-t 安装 command-t yum install -y ruby-devel 编译 command-t，~/.vim/bundle/command-T/ruby/command-t/ruby extconf.rb && make 用法普通模式下 t 打开 command-T 窗口，输入文件名缩小范围，ctrl-j,k 上下移动光标，回车打开文件。 vim-syntastic/syntastic 语法检查 需要配置 .vimrc 插件器 需要全局安装 int 语法错误的代码，保存的时候会提示错误信息 mattn/emmet-vim html 和 css emmet 插件 安装方式： cd ~/.vim/bundle git clone https://github.com/mattn/emmet-vim vi ~/.vimrc，增加 Plugin 'mattn/emmet-vim' OK，编写一个 html 文件测试一下，html:5, heavenshell/vim-jsdoc JSDoc 插件，生成符合 JSDoc 格式的函数块注释 安装方式： cd ~/.vim/bundle git clone https://github.com/heavenshell/vim-jsdoc vi ~/.vimrc，增加 Plugin 'heavenshell/vim-jsdoc' OK，编写一个 js 文件测试一下，写两个函数，一个不带入口参数，一个带两、三个入口参数，在普通模式下，将光标放到 function 行上，按 :JsDoc 奇迹产生了。 vimcn/vimrdoc vim 的中文帮助文档 安装方式： cd ~/.vim/bundle git clone https://github.com/vimcn/vimcdoc vi ~/.vimrc，增加 Plugin 'vimcn/vimcdoc' OK，在 vim 界面下 :help 就可以看到中文帮助文档 coc.nvim 插件系统 coc-html coc-tabnine coc-css coc-json coc-tsserver coc-emmet coc-pairs coc-sql coc-snippets honza/vim-snippets snippets 代码库，coc-snippets 配合这个库才能起作用 键盘映射 键盘映射是 vim 高效率的关键所在。 参考资料：http://www.cnblogs.com/softwaretesting/archive/2011/09/28/2194515.html 操作技巧 技巧一：切换前后台 vim 打开文档，编辑，保存文件，不退出 vim Ctrl+Z 将 vim 至于后台，进入命令行 命令行可以执行任意想要的操作，例如：git 命令，提交变更，推送仓库，等 命令行执行 fg 回到 vim，继续编辑文档 杂项 l :source ~/.vimrc 不退出 vim 重新加载配置文件 参考资料 官方资料 官网 插件 中文帮助文档 文章教程 一起来说 vim 语 vim 练级攻略 知乎 vim 专栏 youtube 上大神的 vim 视频 百度前端工程师的文章 伯乐在线的 vim 文章（重点学习） 2017 -  by 王顶. All rights reserved.本站访客人数  人次document.getElementsByClassName(\"bsz-this-year\")[0].innerHTML = new Date().getFullYear(); window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"5f2010891d3a1e43daad\",\"clientSecret\":\"0f1589253938ab880568105760d6cdbd07da96a6\",\"repo\":\"note\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"note\"],\"id\":\"/office/vim.html\"});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"5f2010891d3a1e43daad\",\"clientSecret\":\"0f1589253938ab880568105760d6cdbd07da96a6\",\"repo\":\"note\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"note\"],\"id\":\"/office/vim.html\"});gitalk.render(\"gitalk-container\"); "},"office/cvim.html":{"url":"office/cvim.html","title":"cVim","keywords":"","body":"cVim chrome 的 cVim 插件。 修改默认搜索引擎 cVim 插件将 Google 搜索作为默认的搜索引擎，下面介绍如何修改 cVim 插件的默认搜素引擎，以改为百度搜索引擎为例： 输入 :settings，按下回车，打开 cVim 插件的设置界面 输入下列代码，并保存 let searchengine baidu = \"https://www.baidu.com/s?wd=%s\" let searchengine baidu = [\"https://www.baidu.com\", \"https://www.baidu.com/s?wd=%s\"] let completionengines = [\"baidu\"] let defaultengine = \"baidu\" cVim link hints 模式失效的解决办法 找到 chrome 插件的安装路径 在 chrome 地址栏中输入，chrome://version/ 在页面中找到个人资料路径 在资源管理器中，打开个人资料路径下的 Extensions 目录 查找 hints.js 代码文件 编辑 727 行，把代码 main.createShadowRoot() 替换成 main.attachShadow(mode: {'open'}) 在 chrome 地址栏中输入：chrome://extensions/ 打开开发者模式，加载已解压的扩展程序，找到 cVim 扩展程序的目录 chrome 重新加载 cVim 插件，问题就解决了 cVim 控制台报错 问题描述：https://github.com/1995eaton/chromium-vim/issues/680 解决办法： 修改 cVim 插件的 messenger.js 代码文件 在 port.onMessage.addListener 函数后加 return true; 在 chrome.extension.onMessage.addListener 函数后加 return true 重新加载 cVim 插件 参考资料 cVim 快捷键表 2017 -  by 王顶. All rights reserved.本站访客人数  人次document.getElementsByClassName(\"bsz-this-year\")[0].innerHTML = new Date().getFullYear(); window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"5f2010891d3a1e43daad\",\"clientSecret\":\"0f1589253938ab880568105760d6cdbd07da96a6\",\"repo\":\"note\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"note\"],\"id\":\"/office/cvim.html\"});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"5f2010891d3a1e43daad\",\"clientSecret\":\"0f1589253938ab880568105760d6cdbd07da96a6\",\"repo\":\"note\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"note\"],\"id\":\"/office/cvim.html\"});gitalk.render(\"gitalk-container\"); "},"office/git.html":{"url":"office/git.html","title":"Git","keywords":"","body":"Git Git 的用法。 Git 基本概念 Workspace： 工作区 Index/Stage：暂存区 Repository： 仓库区（或本地仓库） Remote： 远程仓库 配置 Git 的设置文件为 .gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。 # 显示当前的 Git 配置 git config --list # 编辑 Git 配置文件 git config -e --global # 设置提交代码时的用户信息，用户名最好不要写汉字 git config --global user.name \"your name\" git config --global user.email \"email address\" 新建代码仓库 # 在当前目录新建一个 Git 代码库 git init # 新建一个目录，将其初始化为 Git 代码库 git init [project-name] # 下载一个项目和它的整个代码历史 git clone [url] Git 常用操作 git 快速上手 git init git-demo cd git-demo touch a touch b touch c echo 11 >> a echo 22 >> a git add . git commit -m \"11\" echo 33 >> a git commit -am \"33\" git 基本操作 # add & commit Mothed 1 git add . git commit -m \"message\" # add & commit Mothed 2 git commit -a -m \"message\" # add & commit Mothed 3 git commit -am \"message\" # Git 假定所有的改变都是针对同一件事情的，因此它把这些都放在了一个块里。你有如下几个选项： #输入 y 来暂存该块 #输入 n 不暂存 #输入 e 手工编辑该块 #输入 d 退出或者转到下一个文件 #输入 s 来分割该块 git add -p # 改变文件夹的名字：Name -> name # 直接运行 git mv Name name，执行不成功，会搞成：Name ->name/Name git mv Name tmp git mv tmp name # diff working directory with repos git diff # diff staging area with repos git diff --cached # 拿 working directory 和 SHA 比较 git diff # 比较两次提交的差异 git diff # 查看某次提交变更统计数据 git diff --stat git ssh 链接 # diff working directory with repos ssh-Keygen -t rsa -C \"your email\" # 查看用户主目录的 .ssh/ 文件夹中创建的私钥文件（注意备份） ls ~/.ssh # 目录中两个文件：id_rsa （私钥） 和 id_rsa.pub (公钥) # 打印公钥文件内容 cat ~/.ssh/id_rsa.pub # 把文件内容复制到剪贴板中 # 在 github.com 的 Settings 中找 SSH and GPG keys, new SSH key # 利用 SSH 协议来克隆仓库 git clone git@github.com:wangding/test # 利用 SSH 协议来添加远程链接 git remote add origin git@github.com:wangding/test git branch 操作 # 删除分支 foo 分支，前提 foo 已经合并过 git branch foo -d # 强制删除分支 foo git branch foo -D # 创建分支 foo git branch foo # 切换到分支 foo git checkout foo # 创建分支并同时切换到 foo，一步做到 git checkout -b foo # 修改分支名字 git branch -m old_name new_name git branch -M old_name new_name # 列出远程分支 git branch -r # 查看已经合并的分支 git branch --merged # 查看没有合并的分支 git branch --no-merged # 列出远程合并的分支 git branch -r --merged # 取出远程的 foo 分支 git checkout -t origin/foo # 删除远程分支 1 # 是空格， 是远程分支的名字 # 把空内容推到远程的分支上，就是删除的意思 git push origin : # 删除远程分支 2 # 在 github 上可以直接删除分支 # 在本地 git pull 不能把远程分支的变化反应到本地 # git pull 和 git fetch 不会清除已经删除的远程分支 # git branch -r 还可以看到已经删除的远程分支 # sourceTree 的线图还可以看到已经删除的远程分支 # 可以执行下面的命令解决问题 git fetch -p # 合并分支 git merge # 合并分支，拒绝 fast forward，产生合并 commit git merge --no-ff git blame 逐行查看文档 # 逐行查看 的历史 git blame # 从第 100 行开始查看 10 行 git blame -L 100,10 git clean 砍掉 untracked 档案 # 列出打算要清除的档案 git clean -n # 真正的删除 git clean -f # 连 .gitignore 中忽略的档案也清除 git clean -x git tag 操作 # 给当前的 HEAD 指针处贴标签 foo git tag foo # 给任意的一个提交贴标签 foo git tag foo HEAD~4 # 给当前的 HEAD 指针处贴标签 foo git tag foo -m \"message\" # 删除标签 foo git tag -d foo # 列出标签 git tag # 将所有标签推送到远程仓库中 git push --tags # 将具体某个标签推送到远程仓库中 git push origin v0.1 # 拉下来远程仓库的标签 git pull --tags # 删除远程仓库的标签 foo git push origin :refs/tags/foo git stash 操作 # 保存进度 git stash # 弹出进度 git stash pop # 查看 stash 列表 git stash list # 删除所有进度 git stash clear git rebase 操作 # -i 是交互操作 git rebase -i # 把当前分支在 master 的位置接上 git rebase master Git 其他操作 # 查看某个文件的提交记录 git log # 把 upstream 代表的远程仓库的 master 分支拽到本地 git pull upstream master # 撤销上一个 commit，前提是没有 push 到远程仓库 git add git commit --amend -m \"some comment\" # 弹出 vim 输入多行 message git commit # 查看 log 日志，并过滤需要的信息 git log --grep 提升 GitHub 访问速度 win10 系统 复制下面的域名解析数据到记事本，在站长工具中，对所有域名测试最快的 IP 地址，即 TTL 值最小的 IP 地址，把这个 IP 地址贴到记事本中，换掉原来的 IP 地址。所有域名搞完一遍后。在 C:/Windows/system32/drivers/etc/hosts 找到 hosts 文件，在 hosts 文件最下面复制粘贴下面的内容： 140.82.113.4 github.com 185.199.109.153 assets-cdn.github.com 185.199.109.153 documentcloud.github.com 69.171.245.53 github.global.ssl.fastly.net 203.98.7.65 gist.github.com 185.199.108.154 help.github.com 54.251.140.56 nodeload.github.com 151.101.108.133 raw.github.com 52.205.36.92 status.github.com 151.101.229.194 github.global.ssl.fastly.net 151.101.108.133 avatars0.githubusercontent.com 151.101.108.133 avatars1.githubusercontent.com 然后立刻刷新系统，刷新方法是：cmd 打开控制台窗口，直接输入：ipconfig /flushdns 注意： hosts 文件有权限限制不能编辑保存，先找到 notepad.exe 程序，鼠标右键用管理员身份运行。然后再打开 Hosts 文件，就可以保存了。 CentOS 7 系统 终端命令行模式，输入 sudo vi /etc/hosts，打开 hosts 文件，粘贴上面的 IP 地址和域名的数据。 常见问题 git 存储凭证 $ git config --global credential.helper wincred 用这一行命令搞定，参考网址：https://help.github.com/articles/caching-your-github-password-in-git/ git 撤销远程仓库的提交 Git 文件换行问题 如何在 Github 的 pull request 中进行 code review https://github.com/wangding/Sample/pull/1 https://github.com/wangding/seIDE/pull/6 https://github.com/wangding/seIDE/pull/11 issue 过滤 参考资料 常用 Git 命令清单 Git 使用规范流程 Git 远程操作详解 Git 工作流程 Git 分支管理策略 Git 使用规范 Commit message 和 Change log 编写指南 Git 命令参考手册（中文），网站不错，全是开源方面的资料，平时可以多看看，会有很多简单、有趣的东西 专为设计师写的 github 资料，可以参考一下吧，职业方向还是有差异的 git-it 课程资料，闯关练习软件的教程文字 git 心法（张文细），一个简单、明了的博客文章 张文细的所有 Git 资料，带视频，有幻灯片，讲的很到位，可以模仿 git ready git 命令图解，配图清楚，比较多，够啰嗦 猴子都能懂的 Git 入门，配图还算可以，有点儿卡通幼稚，寓教于乐 Learn Git，排版简洁、大方，配图时尚、漂亮，内容专业权威 资源 勋章：http://shields.io/ 进度：https://github.com/fehmicansaglam/progressed.io Git 教学软件：https://onlywei.github.io/explain-git-with-d3/ 2017 -  by 王顶. All rights reserved.本站访客人数  人次document.getElementsByClassName(\"bsz-this-year\")[0].innerHTML = new Date().getFullYear(); window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"5f2010891d3a1e43daad\",\"clientSecret\":\"0f1589253938ab880568105760d6cdbd07da96a6\",\"repo\":\"note\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"note\"],\"id\":\"/office/git.html\"});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"5f2010891d3a1e43daad\",\"clientSecret\":\"0f1589253938ab880568105760d6cdbd07da96a6\",\"repo\":\"note\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"note\"],\"id\":\"/office/git.html\"});gitalk.render(\"gitalk-container\"); "},"office/note-gitbook.html":{"url":"office/note-gitbook.html","title":"GitBook","keywords":"","body":"GitBook GitBook 的安装配置，以及一些插件信息，当前使用的 GitBook 版本为 3.2.3。 常用命令 安装 GitBook 命令行工具 npm i -g gitbook-cli 其他命令 # 安装 GitBook 插件 gitbook install # 生成 GitBook 静态网站 gitbook build # 构建 Gitbook，并在 8080 端口上，运行 GitBook 网站 # md 文件有更新后，会自动重新构建 gitbook serve --port 8080 参考资料 gitbook 官方文档（中文） 梦之雪技术驿站，GitBook 插件数量介绍的不多，但是每个插件的效果介绍的很详细。最重要的是详细介绍了 GitTalk 评论插件的用法 gitbook-use，对 GitBook 介绍的非常全面，插件介绍的很多很全 刘士电子书综合插件，刘士做的综合插件，图片弹出层效果不错，页脚的页面访问计数效果不错，缺点是对源插件的样式改动太大 gitbook gitbook 插件整理 2017 -  by 王顶. All rights reserved.本站访客人数  人次document.getElementsByClassName(\"bsz-this-year\")[0].innerHTML = new Date().getFullYear(); window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"5f2010891d3a1e43daad\",\"clientSecret\":\"0f1589253938ab880568105760d6cdbd07da96a6\",\"repo\":\"note\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"note\"],\"id\":\"/office/note-gitbook.html\"});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"5f2010891d3a1e43daad\",\"clientSecret\":\"0f1589253938ab880568105760d6cdbd07da96a6\",\"repo\":\"note\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"note\"],\"id\":\"/office/note-gitbook.html\"});gitalk.render(\"gitalk-container\"); "},"office/regexp.html":{"url":"office/regexp.html","title":"RegExp","keywords":"","body":"正则表达式 为什么正则表达式很牛？因为正则表达式可以节省代码。 JavaScript 中的正则表达式 参考资料：《JavaScript 忍者秘籍》第 7 章 正则表达式。下面是学习笔记。 JavaScript 中与正则表达式相关的函数： 正则对象的属性和方法 reg.ignoreCase reg.global reg.multiline reg.test() reg.exec() 字符串对象的方法 str.match() str.search() str.replace() str.split() 正则表达式解释 var pattern = /test/; // 正则表达式字面量 var pattern = new RegExp('test'); // 动态构建正则表达式 var pattern = new RegExp('test', 'ig') // 第二个参数，正则表达式标志 一个动态构建正则表达式的代码片段，这段代码用来检查文本中的淫秽词语： var badWords = ['ape', 'monkey', 'simian', 'gorilla', 'evolution']; var pattern = new RegExp(badWords.join('|'), 'i'); function isAcceptable(text) { return !pattern.test(text); } 三个表达式标志： i 不区分大小写，/test/i g 全局匹配，只是默认只匹配第一次出现的结果，/test/g m 匹配多行，/test/m 术语与操作符 精确匹配，例如：/test/ 匹配一类字符，例如：/[abcd]/，/abc/，/[a-d]/ 转义特殊字符如：^、$、[，另外见下面的预定义字符，例如：/[/，/\\n/ 匹配开始 ^ 与匹配结束 $，例如：/^test/，/test$/，/^test$/ 重复出现： ? 可选，出现一次或者不出现，例如：/t?est/ + 出现一次或者多次，例如：/t+est/ * 出现零次或者多次，例如：/t*est/ 贪婪和非贪婪，默认是贪婪的，可以用 ？改变，例如：/t+?est/ {n}，{n,m}，{n,}，{,m}，例如：/t{2,4}est/ 预定义字符 \\r 回车 \\n 换行 \\s 匹配空白字符，包括：空格、制表符、换页符，等 \\d 匹配任意数字，等价：[0-9] \\D 匹配任意非数字，等价：[^0-9] \\w 匹配包括下划线的任意单词字符，等价于 [A-Za-z0-9_] \\W 匹配任何非单词字符，等价于 [^A-Za-z0-9_] . 匹配除了换行 \\n 之外的任意字符 \\b 空格，单词边界，可以是标点符号、空格、字符的开头或结尾； \\v 垂直制表符 \\f 换页符 \\t 水平制表符 分组，例如：/(ab)+/ 或操作符，例如：/(ab)+|(cd)+/ 反向引用，\\1，\\2 一般和分组结合使用，例如：/(.+)/ 正向先行断言，(?=) 括号里面的代表位置，不做匹配 编译正则表达式 正则表达式的两个重要阶段是： 编译，正则表达式第一次被创建时 执行，编译过的正则表达式进行字符串匹配时 正则表达式可以是编程时指定，也就是正则表达式字面量。 也可以在运行时指定，就是用字符串作为参数，调用 new RegExp() 创建正则表达式。注意，正则表达式字面量 \\s 在字符串中应该表示为 '\\s'，其中 \\\\ 表示斜杠的转义。 捕获匹配的片段 执行简单的捕获 var str = 'ac--bc' str.match(/[ab]c/) 返回第一个匹配的结果 用全局表达式进行匹配 var str = 'ac--bc' str.match(/[ab]c/g) 返回所有匹配的结果 var html = 'helloworld!' html.match(/]*?)>/) html.match(/]*?)>/g) 注意观察两个 match 的结果，这是两个不同的数组。match 的行为主要受到 /g 的影响。没有 /g 全局匹配的时候，match 只匹配第一个，如果没有匹配则返回 null。如果匹配成功，则返回一个数组，数组的第一个元素是整个匹配项，数组的其他匹配项，则是正则表达式的匹配子项。 var html = 'helloworld!' var reg = /]*?)>/g reg.exec(html) reg.exec(html) 反复调用 exec 方法，该方法保存了上一次调用的状态。 捕获的引用 'helloworld!'.match(/]*(.*?)/g)); 1234567890'.replace(/(\\d{3})(\\d{3})(\\d{4})/, `$1-$2-$3`); 第一行代码使用 \\1 来捕获匹配项 第二行代码使用 $1、$2、$3 表示每个捕获的数字 没有捕获的分组 \"ninja-ninja-sword\".match(/((ninja-)+)sword/) \"ninja-ninja-sword\".match(/((?:ninja-)+)sword/) 在括号后加上 ?: 标记，这就是所谓的被动子表达式，该表达式只会为外层的括号创建捕获。 利用函数进行替换 function upper(letter) { return letter.toUpperCase(); } 'border-bottom-width'.replace(/-(\\w)/g, upper) function compress(source) { var keys ={}; source.replace(/([^=&]+)=([^&]*)/g, function(full, key, value) { //console.log('full = %s, key = %s, value = %s', full, key, value); //console.log('before: ', keys); keys[key] = (keys[key] ? keys[key] + ',' : '') + value; //console.log('after: ', keys); return ''; }); console.log('keys: ', keys); var result = []; for(var key in keys) { result.push(key + '=' + keys[key]); } return result.join('&'); } var str = 'foo=1&foo=2&blash=a&blash=b&foo=3'; //console.log('str = %s', str); console.log(compress(str)); 【补充】 测验和练习，可以在 chrome 控制台中执行下面的代码： 测试正则表达式的模式： var reg = /test/ reg.test('testt') 捕获字符串模式： var str = 'ac--bc' str.match(/[ab]c/) str.match(/[ab]c/g) Linux 中的正则表达式 正则表达式的语法基本相同。只不过 Linux Bash 中的正则表达式语法分为：基本的正则表达式和扩展的正则表达式，两个加起来就是 JavaScript 的正则表达式。 grep 命令实现文本搜索 grep 命令的格式如下： grep [options] regex [file...] options： -i 忽略大小写 -E 使用扩展的正则表达式语法 另外，对于命令行有特别用途的元字符，例如：*，如果出现在正则表达式中，需要用 \\ 转义。 例如： 在 ~/wd/nodejs-demo/ 目录下面找所有 .js 扩展名的文件，执行如下命令： find . | grep \".js\" // 会匹配 .json 文件 find . | grep \".js$\" // 会匹配 node_module 目录下的 *.js 文件 find . | grep \"^\\.\\/.*js$\" // 会匹配 node_module 目录下的 *.js 文件 find . | grep \"^\\.\\/[0-9]\\{2\\}.*js$\" // 正确匹配，匹配上的文字呈现红色 注意 PATTERN 被双引号引用起来以防止被 Shell 解析。 Linux 基础命令介绍五：文本过滤 grep：https://segmentfault.com/a/1190000007416745 less 命令中用正则表达式搜索 /后面是正则表达式 vim 中的正则表达式 vim 支持基本的正则表达式，只是正则表达式的写法略微有些区别。我们看到表达式几乎一样；然而，在扩展表达式中，许多被认为是元字符的字符在基本的表达式中被看作是文本字符。只有用反斜杠把它们转义之后，它们才被看作是元字符。 /后面是正则表达式，实现文本搜索 :%s/正则表达式/新文本/g，实现全局正则表达式搜索替换。注意，最好在替换之前先搜索一下，相当于对正则表达式做一下测试，以免正则表达式错误导致文本的意外更改。 s 是 substitute 替换的意思，前面的 % 相当于 1,$ 代表替换范围是整个文档。其中正则表达式中斜杠如果太多 / 可以用其他符号替代，比如：?。 例如：:s?^\\(\\s*\\)\\(.*\\)\\s*$? \\1 + '\\2'? 这个替换的正则表达式用 ? 代替了 /，\\1 和 \\2 代表引用，引用相应的分组 相关资源 正则表达式在线开发和测试工具：https://regex101.com/ 正则表达式在线开发网站：http://www.regexplanet.com/advanced/javascript/index.html 2017 -  by 王顶. All rights reserved.本站访客人数  人次document.getElementsByClassName(\"bsz-this-year\")[0].innerHTML = new Date().getFullYear(); window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"5f2010891d3a1e43daad\",\"clientSecret\":\"0f1589253938ab880568105760d6cdbd07da96a6\",\"repo\":\"note\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"note\"],\"id\":\"/office/regexp.html\"});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"5f2010891d3a1e43daad\",\"clientSecret\":\"0f1589253938ab880568105760d6cdbd07da96a6\",\"repo\":\"note\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"note\"],\"id\":\"/office/regexp.html\"});gitalk.render(\"gitalk-container\"); "},"office/tern_for_vim.html":{"url":"office/tern_for_vim.html","title":"tern_for_vim","keywords":"","body":"tern_for_vim tern_for_vim 插件的用法。 官方文档资料 http://ternjs.net/doc/manual.html#plugin_commonjs 配置的例子 .tern-project 配置文件的内容。 下面的例子是做 nodejs 后端开发的案例。支持 CommonJS module 插件的代码补全。 { \"libs\": [ \"browser\", \"jquery\" ], \"plugins\": { \"node\": {}, \"modules\": { \"modules\": \"./node_modules/selenium-webdriver/index.js\" } } } 下面的例子是做前端开发的案例。 { \"libs\": [ \"browser\", \"jquery\" ], \"loadEagerly\": [ \"importantfile.js\" ], \"plugins\": { \"requirejs\": { \"baseURL\": \"./\", \"paths\": {} } } } 2017 -  by 王顶. All rights reserved.本站访客人数  人次document.getElementsByClassName(\"bsz-this-year\")[0].innerHTML = new Date().getFullYear(); window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"5f2010891d3a1e43daad\",\"clientSecret\":\"0f1589253938ab880568105760d6cdbd07da96a6\",\"repo\":\"note\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"note\"],\"id\":\"/office/tern_for_vim.html\"});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"5f2010891d3a1e43daad\",\"clientSecret\":\"0f1589253938ab880568105760d6cdbd07da96a6\",\"repo\":\"note\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"note\"],\"id\":\"/office/tern_for_vim.html\"});gitalk.render(\"gitalk-container\"); "},"office/redmine.html":{"url":"office/redmine.html","title":"Redmine","keywords":"","body":"Redmine 项目管理 安装 Redmine 安装 ruby CentOS 7 安装 ruby 2.6 安装步骤如下 # 查看系统当前 ruby 版本 ruby -v # 通过 yum 安装 ruby 和依赖的包 sudo yum -y install ruby ruby-devel rubygems rpm-build # 查看 ruby 版本，应该是 2.0 版本，版本较低 ruby -v # 安装 ruby 依赖 sudo yum -y install gcc-c++ patch readline readline-devel \\ zlib zlib-devel libyaml-devel libffi-devel openssl-devel \\ make bzip2 autoconf automake libtool bison iconv-devel \\ sqlite-devel wget mysql-devel # 修改 ruby 的 gem 源 # 查看查看当前使用的源地址 gem sources # 添加国内镜像地址 gem sources -a https://gems.ruby-china.com/ # 删除默认的源地址 gem sources -r https://rubygems.org/ # 更新源的缓存 gem sources -u # 安装 rvm # 获取密钥 gpg --keyserver hkp://pool.sks-keyservers.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB # 安装 rvm curl https://raw.githubusercontent.com/rvm/rvm/master/binscripts/rvm-installer | bash -s stable # 更新配置文件 source /home/wangding/.rvm/scripts/rvm # 查看所有可安装版本 rvm list known # 修改 rvm 源 echo \"ruby_url=https://cache.ruby-china.com/pub/ruby\" > ~/.rvm/user/db # 安装 ruby 2.6 rvm install 2.6 # 更改 gem 国内源 gem sources --add https://gems.ruby-china.com/ --remove https://rubygems.org/ gem sources -l # 确保只有 gems.ruby-china.com # 安装 rails gem install rails # 检查 rails 的版本 rails -v # 检查 ruby 的版本 ruby -v # 检查 gem 的版本 gem -v 下载 redmine 原代码 wget --no-check-certificate https://redmine.org/releases/redmine-4.1.1.tar.gz 解压缩，tar zxvf redmine-4.1.1.tar.gz 创建 redmine 数据库 用下面的 SQL 脚本创建 redmine 数据库 CREATE DATABASE redmine CHARACTER SET utf8mb4; CREATE USER 'redmine'@'localhost' IDENTIFIED BY 'my_password'; GRANT ALL PRIVILEGES ON redmine.* TO 'redmine'@'localhost'; 编辑数据库连接的配置文件 进入 redmine 代码文件夹，cd redmine-4.1.1/ 复制代码文件，cp config/database.yml.example config/database.yml 编辑 database.yml 安装 redmine 项目依赖 安装 bundler, gem install bundler 配置 bundler 国内源，bundle config mirror.https://rubygems.org https://gems.ruby-china.com gem install mysql2 -v '0.5.3' 安装项目依赖，bundle install --without development test 创建 Session 加密 token bundle exec rake generate_secret_token 创建数据库的表结构 RAILS_ENV=production bundle exec rake db:migrate 初始化 redmine 数据库数据 RAILS_ENV=production bundle exec rake redmine:load_default_data 启动 redmine 服务 bundle exec rails server webrick -e production 登录 redmine 用户名：admin 密码：admin 配置 redmine 邮件服务 进入 redmine 代码目录，cd redmine-4.1.1 修改默认配置文件名，mv config/configuration.yml.example config/configuration.yml 编辑配置文件，vi config/configuration.yuml 使用 163 邮箱的配置信息如下，其他邮箱类似： production: email_delivery: delivery_method: :smtp smtp_settings: ssl: true address: \"smtp.163.com\" port: 465 domain: '163.com' authentication: :login user_name: 'email address' password: '授权码' ssh 连接 bitnami redmine vm sudo rm -f /etc/ssh/sshd_not_to_be_run sudo systemctl enable ssh sudo systemctl start ssh 用 xshell 连接 bitnami redmine vm Git 版本库配置 http://www.redmine.org/projects/redmine/wiki/HowTo_Easily_integrate_a_(SSH_secured)_GIT_repository_into_redmine http://www.redmine.org/projects/redmine/wiki/RedmineRepositories#Git-repository http://www.redmine.org/projects/redmine/wiki/HowTo_configure_Redmine_for_advanced_git_integration 分以下三个步骤： 在 bitnami redmine 服务器上创建远程仓库的镜像仓库 注意，不能用 --bare 参数，因为 bare 只能作为服务器，接受 push，不能从远程仓库 fetch 拉取合并更新。 【参考资料】：http://blog.sina.com.cn/s/blog_72ef7bea0101gcao.html cd mkdir repos cd repos git clone --mirror https://github.com/wangding/git-demo 配置 Redmine 的 Git 参数 Redmine 上设置 Git 参数 SCM：Git 主版本库：true 标识：git-demo (跟仓库的名字相同) 库路径：/home/bitnami/repos/git-demo.git 在服务器上编写 crontab 计划任务 定时拉取远程仓库。 cd /home/bitnami/repos/git-demo.git && sudo git fetch --all bitnami redmine https://docs.bitnami.com/virtual-machine/faq/#how-to-remotely-access-the-bitnami-application https://docs.bitnami.com/virtual-machine/faq/#how-to-connect-to-the-server-through-ssh 研究 redmine 插件 redmine Mysql mysql -u root -p 虚拟机上的密码 2017 -  by 王顶. All rights reserved.本站访客人数  人次document.getElementsByClassName(\"bsz-this-year\")[0].innerHTML = new Date().getFullYear(); window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"5f2010891d3a1e43daad\",\"clientSecret\":\"0f1589253938ab880568105760d6cdbd07da96a6\",\"repo\":\"note\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"note\"],\"id\":\"/office/redmine.html\"});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"5f2010891d3a1e43daad\",\"clientSecret\":\"0f1589253938ab880568105760d6cdbd07da96a6\",\"repo\":\"note\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"note\"],\"id\":\"/office/redmine.html\"});gitalk.render(\"gitalk-container\"); "},"office/vmware.html":{"url":"office/vmware.html","title":"vmware","keywords":"","body":"vmware 虚拟机 vmware workstation 虚拟机软件的使用。 快速创建虚拟机 已经有了一个虚拟机，可以在这个虚拟机的基础上快速创建另一个虚拟机。对虚拟机文件夹进行复制就行。但是，一定要注意几点： 复制虚拟机之前，虚拟机一定要关机，不能使挂起状态； 复制虚拟机后，修改网卡的 MAC 地址，避免冲突； 复制虚拟机后，修改网卡的 IP 地址，避免冲突； 快捷键操作 Ctrl + Alt 可以把光标从虚拟机界面中释放出来，这个时候就可以用 Ctrl + win + Ctrl + G Ctrl + Win + -> 把 win10 桌面切换到虚拟机的窗口时，虚拟机并没有获得焦点，这时可以用快捷键来进入虚拟机，也可以用鼠标点击虚拟机界面中的窗口，直接操作。 故障排除 安装 vmware win10 没有 vmnet8 网卡，参考链接 vmnet8 网卡的 IP 地址是 169.254.XXX.XXX，vmware 的 DHCP 服务没有启动 linux 虚拟机 ping www.baidu.com，或者 ping 192.168.133.2 网关 ping 不到，可能是 vmware nat 服务没有启动 确保 vmware 以下五个服务程序都是启动的 VMware Workstation Server VMware NAT Service VMware USB Arbitration Service VMware DHCP Service VMware Authorization Service 2017 -  by 王顶. All rights reserved.本站访客人数  人次document.getElementsByClassName(\"bsz-this-year\")[0].innerHTML = new Date().getFullYear(); window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"5f2010891d3a1e43daad\",\"clientSecret\":\"0f1589253938ab880568105760d6cdbd07da96a6\",\"repo\":\"note\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"note\"],\"id\":\"/office/vmware.html\"});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"5f2010891d3a1e43daad\",\"clientSecret\":\"0f1589253938ab880568105760d6cdbd07da96a6\",\"repo\":\"note\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"note\"],\"id\":\"/office/vmware.html\"});gitalk.render(\"gitalk-container\"); "},"office/win10.html":{"url":"office/win10.html","title":"Win 10","keywords":"","body":"win10 操作系统 文件夹共享问题 一个 win10 电脑访问，另一个 win10 电脑上的共享文件夹。设了网络驱动器 z 盘，刚开始能访问，后来不能访问了。提示：本地设备名已在使用中。此连接尚未还原。 解决办法： cmd 进入命令行 net use * /delete 删除所有映射的盘符 win + r，打开运行对话框，输入 UNC 路径，例如：\\\\wd-pc 在资源管理器中，创新映射网络盘符 解决了弹窗的问题 https://www.zhihu.com/question/24265718 小娜不工作 小娜不能启动应用程序的处理办法 http://www.xitongcheng.cc/xtjc/12276.html 系统管理员身份打开 powershell 运行下面的命令，重新注册启动小娜 Get-AppXPackage -Name Microsoft.Windows.Cortana | Foreach {Add-AppxPackage -DisableDevelopmentMode -Register \"$($_.InstallLocation)\\AppXManifest.xml\"} 小娜启动绿色软件 小娜启动绿色软件的步骤 在开始菜单中创建快捷键 没有权限，首先设置权限 添加了快捷方式后，小娜就能正常工作了 win10 磁盘占用百分之百 http://jingyan.baidu.com/article/2f9b480d94898541cb6cc282.html 阻止 win10 自动安装软件 http://jingyan.baidu.com/article/4dc40848b152cdc8d846f143.html 2017 -  by 王顶. All rights reserved.本站访客人数  人次document.getElementsByClassName(\"bsz-this-year\")[0].innerHTML = new Date().getFullYear(); window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"5f2010891d3a1e43daad\",\"clientSecret\":\"0f1589253938ab880568105760d6cdbd07da96a6\",\"repo\":\"note\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"note\"],\"id\":\"/office/win10.html\"});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"5f2010891d3a1e43daad\",\"clientSecret\":\"0f1589253938ab880568105760d6cdbd07da96a6\",\"repo\":\"note\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"note\"],\"id\":\"/office/win10.html\"});gitalk.render(\"gitalk-container\"); "},"office/latex.html":{"url":"office/latex.html","title":"LaTex","keywords":"","body":"latex 参考资料 在线 LaTex 编辑器 我的 LaTeX 入门 mathjax basic tutorial and quick reference KaTex 语法说明 2017 -  by 王顶. All rights reserved.本站访客人数  人次document.getElementsByClassName(\"bsz-this-year\")[0].innerHTML = new Date().getFullYear(); window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"5f2010891d3a1e43daad\",\"clientSecret\":\"0f1589253938ab880568105760d6cdbd07da96a6\",\"repo\":\"note\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"note\"],\"id\":\"/office/latex.html\"});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"5f2010891d3a1e43daad\",\"clientSecret\":\"0f1589253938ab880568105760d6cdbd07da96a6\",\"repo\":\"note\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"note\"],\"id\":\"/office/latex.html\"});gitalk.render(\"gitalk-container\"); "},"web/npm.html":{"url":"web/npm.html","title":"NPM","keywords":"","body":"npm 用法 npm 是 node package management 的缩写。npm 是一个 node 包管理和分发工具，已经成为了非官方的发布 node 模块（包）的标准。有了 npm，可以很快的找到特定服务要使用的包，进行下载、安装以及管理已经安装的包。 常用命令 npm install有了 package.json 文件，尤其是其中的 dependencies 字段指明了包的依赖关系后，直接使用 npm install 命令，就会在当前目录中安装所需要的模块。所以代码上传 Github 时，不用上传 node_modules 中的内容，服务器部署的时候可以自动安装依赖包。可以做个实验把 node_modules 文件夹都删除，执行 npm install 命令看看效果。 npm install 命令的 -g 参数 node 模块或应用的安装分为全局模式和本地模式。一般情况下会以本地模式运行，包会被安装到和你的应用程序代码的本地 node_modules 目录下。在全局模式下，Node 包会被安装到 Node 的安装目录下的 node_modules 下。 -g 是全局安装命令，获知使用$npm set global=true来设定安装模式，$npm get global 可以查看当前使用的安装模式。 但是代码中，直接通过 require() 的方式是没有办法调用全局安装包的。全局的安装是供命令行使用的。 npm install 命令的 --save 参数或者 -S 参数 将信息写入 package.json 中项目路径中如果有 package.json 文件时，直接使用 npm install 方法就可以根据 dependencies 配置安装所有的依赖包，这样代码提交到 github 时，就不用提交 node_modules 这个文件夹了。 npm install -D|--save-dev 安装依赖包，并将依赖包的信息写入 package.json 文件的开发依赖节下 npm config get cache 查看缓存目录 npm cache list 查看缓存 npm init 初始化一个 package npm adduser npm login npm logout npm init --scope= npm ls 查看安装的所有包 可能会报错：extraneous 错误，需要修改 package.json 文件的 dependence npm test npm publish npm config set registry https://www.npmjs.com/ npm 官网搜索发布的包 npm init & npm install & 检查 node_modules 文件夹下的东西 npm view 查看 package 在 npm 官网的注册参数信息，每次 publish 之后信息都会改变，不 publish 改变的本地的信息，npm view 看到的信息不变 npm version 设置 package 的新版本号 npm dist-tag 修改模块发布的标签 npm outdated 检查版本过期的包 npm update --save 更新 package.json 依赖项中的软件包 npm uninstall --save 删除依赖的包 npm unpublish --force npm list -g 查看全局安装的包 npm install 安装加速的问题可以先不讨论。 假如，上面的安装命令执行的非常慢，因为 date-now 这个包非常小，可能快慢看不出来。 你可以试着安装一下 npm install express 这个包比较大，网络 npm install date-now --registry=http://registry.npm.taobao.org 速度 OK npm config ls -l 重看 npm 配置信息，registry = \"https://registry.npmjs.org/\" 每次 npm install 时，设置仓库地址非常不方便 npm config set registry http://registry.npm.taobao.org npm config set package-lock false npm config set registry https://registry.npmjs.org/ npm config ls -l 看到设置成功 rm -rf node_modules 删除依赖包 npm install date-now 看一下速度 参考资料 npm 的官方网站 阮一峰：npm 模块安装机制简介 阮一峰：JavaScript 教程的 NodeJS 章节中的部分内容 阮一峰：npm scripts 使用指南 阮一峰：package.json 详解 npm 命令的用法 npm help install how-to-npm Node School 教程 2017 -  by 王顶. All rights reserved.本站访客人数  人次document.getElementsByClassName(\"bsz-this-year\")[0].innerHTML = new Date().getFullYear(); window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"5f2010891d3a1e43daad\",\"clientSecret\":\"0f1589253938ab880568105760d6cdbd07da96a6\",\"repo\":\"note\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"note\"],\"id\":\"/web/npm.html\"});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"5f2010891d3a1e43daad\",\"clientSecret\":\"0f1589253938ab880568105760d6cdbd07da96a6\",\"repo\":\"note\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"note\"],\"id\":\"/web/npm.html\"});gitalk.render(\"gitalk-container\"); "},"web/benchmark.html":{"url":"web/benchmark.html","title":"BenchMark","keywords":"","body":"Benchmark 基准测试 Apache Benchmark （ab） 安装 ab 查找 ab 程序的 yum 安装包。 yum provide ab sudo yum install -y httpd-tools-2.4.6-67.el7.centos.x86_64 ab ab www.baidu.com/ 参考资料： http://blog.sina.com.cn/s/blog_9c6f23fb0102wgrb.html 2017 -  by 王顶. All rights reserved.本站访客人数  人次document.getElementsByClassName(\"bsz-this-year\")[0].innerHTML = new Date().getFullYear(); window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"5f2010891d3a1e43daad\",\"clientSecret\":\"0f1589253938ab880568105760d6cdbd07da96a6\",\"repo\":\"note\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"note\"],\"id\":\"/web/benchmark.html\"});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"5f2010891d3a1e43daad\",\"clientSecret\":\"0f1589253938ab880568105760d6cdbd07da96a6\",\"repo\":\"note\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"note\"],\"id\":\"/web/benchmark.html\"});gitalk.render(\"gitalk-container\"); "},"web/css.html":{"url":"web/css.html","title":"CSS","keywords":"","body":"CSS 学习 CSS 的层次： 基本样式，例如：背景色、文字颜色、字体，最简单的选择器，把英文单词记住，就学会了； 盒模型、选择器、布局、定位； CSS3 动画特效，等； Bootstrap 库，等； SASS、LESS 或 Stylus 等高级语言； CSS 基础 CSS 简介 CSS 指层叠样式表 (Cascading Style Sheets) 样式定义如何显示 HTML 元素 样式通常存储在样式表中 把样式添加到 HTML 4.0 中，是为了解决内容与表现分离的问题 外部样式表可以极大提高工作效率 外部样式表通常存储在 CSS 文件中 多个样式定义可层叠为一 样式解决了一个普遍的问题 HTML 标签原本被设计为用于定义文档内容。通过使用 、、 这样的标签，HTML 的初衷是表达“这是标题”、“这是段落”、“这是表格”之类的信息。同时文档布局由浏览器来完成，而不使用任何的格式化标签。 由于两种主要的浏览器（Netscape 和 Internet Explorer）不断地将新的 HTML 标签和属性（比如字体标签和颜色属性）添加到 HTML 规范中，创建文档内容清晰地独立于文档表现层的站点变得越来越困难。 为了解决这个问题，万维网联盟（W3C），这个非营利的标准化联盟，肩负起了 HTML 标准化的使命，并在 HTML 4.0 之外创造出样式（Style）。 所有的主流浏览器均支持层叠样式表。 样式表极大地提高了工作效率 样式表定义如何显示 HTML 元素，就像 HTML 3.2 的字体标签和颜色属性所起的作用那样。样式通常保存在外部的 .css 文件中。通过仅仅编辑一个简单的 CSS 文档，外部样式表使你有能力同时改变站点中所有页面的布局和外观。 由于允许同时控制多重页面的样式和布局，CSS 可以称得上 WEB 设计领域的一个突破。作为网站开发者，你能够为每个 HTML 元素定义样式，并将之应用于你希望的任意多的页面中。如需进行全局的更新，只需简单地改变样式，然后网站中的所有元素均会自动地更新。 多重样式将层叠为一个 样式表允许以多种方式规定样式信息。样式可以规定在单个的 HTML 元素中，在 HTML 页的头元素中，或在一个外部的 CSS 文件中。甚至可以在同一个 HTML 文档内部引用多个外部样式表。 层叠次序 当同一个 HTML 元素被不止一个样式定义时，会使用哪个样式呢？ 一般而言，所有的样式会根据下面的规则层叠于一个新的虚拟样式表中，其中数字 4 拥有最高的优先权。 浏览器缺省设置 外部样式表 内部样式表（位于 标签内部） 内联样式（在 HTML 元素内部） 因此，内联样式（在 HTML 元素内部）拥有最高的优先权，这意味着它将优先于以下的样式声明： 标签中的样式声明，外部样式表中的样式声明，或者浏览器中的样式声明（缺省值）。 CSS 基础语法 CSS 规则由两个主要的部分构成：选择器，以及一条或多条声明。 selector {declaration1; declaration2; ... declarationN } 选择器通常是您需要改变样式的 HTML 元素。 每条声明由一个属性和一个值组成。 属性（property）是您希望设置的样式属性（style attribute）。每个属性有一个值。属性和值被冒号分开。 selector {property: value} 下面这行代码的作用是将 h1 元素内的文字颜色定义为红色，同时将字体大小设置为 14 像素。 在这个例子中，h1 是选择器，color 和 font-size 是属性，red 和 14px 是值。 h1 {color:red; font-size:14px;} 下面的示意图为您展示了上面这段代码的结构： 提示：请使用花括号来包围声明。 值的不同写法和单位 除了英文单词 red，我们还可以使用十六进制的颜色值 #ff0000： p { color: #ff0000; } 为了节约字节，我们可以使用 CSS 的缩写形式： p { color: #f00; } 我们还可以通过两种方法使用 RGB 值： p { color: rgb(255,0,0); } p { color: rgb(100%,0%,0%); } 请注意，当使用 RGB 百分比时，即使当值为 0 时也要写百分比符号。但是在其他的情况下就不需要这么做了。比如说，当尺寸为 0 像素时，0 之后不需要使用 px 单位，因为 0 就是 0，无论单位是什么。 记得写引号 提示：如果值为若干单词，则要给值加引号： p {font-family: \"sans serif\";} 多重声明： 提示：如果要定义不止一个声明，则需要用分号将每个声明分开。下面的例子展示出如何定义一个红色文字的居中段落。最后一条规则是不需要加分号的，因为分号在英语中是一个分隔符号，不是结束符号。然而，大多数有经验的设计师会在每条声明的末尾都加上分号，这么做的好处是，当你从现有的规则中增减声明时，会尽可能地减少出错的可能性。就像这样： p {text-align:center; color:red;} 你应该在每行只描述一个属性，这样可以增强样式定义的可读性，就像这样： p { text-align: center; color: black; font-family: arial; } 空格和大小写 大多数样式表包含不止一条规则，而大多数规则包含不止一个声明。多重声明和空格的使用使得样式表更容易被编辑： body { color: #000; background: #fff; margin: 0; padding: 0; font-family: Georgia, Palatino, serif; } 是否包含空格不会影响 CSS 在浏览器的工作效果，同样，与 XHTML 不同，CSS 对大小写不敏感。不过存在一个例外：如果涉及到与 HTML 文档一起工作的话，class 和 id 名称对大小写是敏感的。 CSS 样式 CSS 背景 CSS 文本 CSS 字体 CSS 链接 CSS 列表 CSS 表格 CSS 轮廓 CSS 盒模型 CSS 框模型概述 CSS 内边距 CSS 边框 CSS 外边距 CSS 外边距合并 CSS 定位 CSS 定位概述 CSS 相对定位 CSS 绝对定位 CSS 浮动 CSS 选择器 CSS 元素选择器 CSS 选择器分组 CSS 类选择器详解 CSS ID 选择器详解 CSS 属性选择器详解 CSS 后代选择器 CSS 子元素选择器 CSS 相邻兄弟选择器 CSS 伪类 CSS 伪元素 参考：http://www.w3school.com.cn/cssref/css_selectors.asp CSS 高级 CSS 对齐 CSS 尺寸 CSS 分类 CSS 导航栏 CSS 图片库 CSS 图片透明 CSS 媒介类型 CSS 实战 stylish 火狐插件 分享 stylish 作品 百度案例：https://www.zhihu.com/question/36540171 https://www.zhihu.com/search?type=content&q=stylish CSS 画图标 视频：慕课网，重拾CSS的乐趣 作品：http://www.oschina.net/news/52103/50-css-only-icon-graphics 极客：http://one-div.com/ 盒模型中 margin、border 和 paddding 会让盒子尺寸变大，替代方案是使用 box-sizing background 和 background-color 的区别background 包括 background-color，当用 background 定义背景色的时候跟 background-color 作用完全相同。但是 background 还可以定义背景图片，是否居中，等样式。 background: #FFFFFF url(1.png) no-repeat center top background-color: #FFFFFF; background-image: url(1.png); background-repeat: no-repeat; background-position: center top div 块布局主要涉及到的样式如下： 定位方式：absolute, static（默认），relative 定位信息，left, top, right, bottom 尺寸信息，height, width 【参考资料】 css 布局的学习资料1：http://zh.learnlayout.com/ css 布局的学习资料2：慕课网的布局视频课程，一列布局、两列布局、三列布局，等 2017 -  by 王顶. All rights reserved.本站访客人数  人次document.getElementsByClassName(\"bsz-this-year\")[0].innerHTML = new Date().getFullYear(); window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"5f2010891d3a1e43daad\",\"clientSecret\":\"0f1589253938ab880568105760d6cdbd07da96a6\",\"repo\":\"note\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"note\"],\"id\":\"/web/css.html\"});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"5f2010891d3a1e43daad\",\"clientSecret\":\"0f1589253938ab880568105760d6cdbd07da96a6\",\"repo\":\"note\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"note\"],\"id\":\"/web/css.html\"});gitalk.render(\"gitalk-container\"); "},"web/javascript.html":{"url":"web/javascript.html","title":"JavaScript","keywords":"","body":"JavaScript 基本语法 if 判断 把简单的 if 判断，改成三目运算 优点：代码简洁 缺点：代码比较长，不如 if 语句直观 // 修改之前 for(let i=0; i max) max = freq[i]; } // 修改之后 freq.forEach(f => max = (f > max) ? f : max); 把简单的 if 判断，变成与运算 优点：代码简洁 缺点：降低了代码的可读性 // 修改之前 for(let i=0, num=0; i for 循环 把循环变量定义在 for 语句块里，并使用 let 声明 优点：可以更早的垃圾回收；可以减少循环变量之间的干扰 缺点：循环体外，不能再访问循环变量 // 修改之前 let i; for(i=0; i 把循环体中用到的临时变量，定义到 for 语句中 优点：代码简洁 缺点：循环体外，不能再访问循环体内部变量 // 修改之前 let num = 0; for(let i=0; i 把 for 循环改成 forEach 优点：代码简洁 缺点：不能访问循环变量 // 修改之前 for(let i=0; i freq[data]++); 把循环体内变量的定义，放到循环体外面 优点：避免频繁分配内存 缺点：扩大的变量的作用域；可能导致变量之前的干扰 // 修改之前 for(let i=0; i 把 for 循环改成 map 调用 把 for 循环改成 reduce 调用 把 for 循环改成 filter 调用 return 语句 把 if 判断，决定不同的返回值，改成三目运算符 优点：代码简洁 缺点：无 // 修改之前 if(nums.length === 0) { return 0; } else { return Math.max(...nums); } // 修改之后 return (nums.length === 0) ? 0 : Math.max(...nums); 类型判断 四种判断类型的方法： typeof，缺点：不能判断对象类型 typeof [], typeof {} constructor，可以找到变量是通过谁构造出来的 [].constructor ({}).constructor instanceof，判断谁是谁的实例 Object.prototype.toString.call()，可以。但是缺点，不能判断谁是谁的实例 高阶函数 (high order function) 普通函数就是一阶函数 函数的函数就是二阶函数，即：高阶函数 函数的函数，有以下三种形态： 函数的参数是函数（这个作为参数传入的函数，通常叫回调函数）。例如：Array.prototype.forEach()，Array.prototype.reduce()，Array.prototype.map()，Array.prototype.filter() 函数的返回值是函数，外层函数对返回的函数形成一层包裹 上面两者的混合 应用场景 1：扩展当前的业务代码，又不希望修改原函数，面向切面编程或代理模式 Function.prototype.before = function(beforefn){ let _self = this; // 保存原函数的引用 return function() { // 返回包含了新函数和原函数的代理函数 beforefn.apply(this, arguments); // 执行新函数，修正this _self.apply(this, arguments); // 执行原函数 } } Function.prototype.after = function(afterfn){ let _self = this; return function(){ _self.apply(this, arguments); afterfn.apply(this, arguments); } } let func = function(){ console.log(4) } // before 函数返回一个函数，取决于调用它的函数 func = func.before(function(){ console.log(1); }).before(function() { console.log(2); }).after(function(){ console.log(7); }).after(function() { console.log(8); }); console.log(func.toString()); func(); 应用场景二，柯里化。在计算机科学中，柯里化（英语：Currying）是把接受多个参数的函数变换成接受一个单一参数（最初函数的第一个参数）的函数，并且返回接受余下的参数而且返回结果的新函数的技术。 柯里化，可以理解为提前接收部分参数，延迟执行，不立即输出结果，而是返回一个接受剩余参数的函数。因为这样的特性，也被称为部分计算函数。柯里化，是一个逐步接收参数的过程。反柯里化，是一个泛型化的过程。它使得被反柯里化的函数，可以接收更多参数。目的是创建一个更普适性的函数，可以被不同的对象使用。有鸠占鹊巢的效果。 // 类型判断的柯里化 console.log(isType('123', 'String')); console.log(isType([], 'String')); function isType(value, type) { return Object.prototype.toString.call(value) === `[object ${type}]`; } // 把 isType 方法细化为：isArray, isString，把两个参数变成一个参数 function isType2(type) { return function(value) { return Object.prototype.toString.call(value) === `[object ${type}]`; } } let isString = isType2('String'); let isArray = isType2('Array'); console.log(isString('123')); console.log(isString([])); console.log(isArray([])); // 通用的 currying function sum(a, b, c, d, e, f) { return a + b + c + d + e + f; } console.log(sum(1,2,3,4,5,6)); // 改成: // let sum = currying(sum)(1, 2)(3, 4)(5)(6) function currying(fn, arr=[]) { let len = fn.length; return function(...arg) { arr = [...arr, ...arg]; if(arr.length 工厂函数 现实中的工厂生成产品，编程领域工厂的产品是对象 函数的返回值是对象，这种函数成为工厂函数 参考资料 函数式编程 web component xy-ui 2017 -  by 王顶. All rights reserved.本站访客人数  人次document.getElementsByClassName(\"bsz-this-year\")[0].innerHTML = new Date().getFullYear(); window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"5f2010891d3a1e43daad\",\"clientSecret\":\"0f1589253938ab880568105760d6cdbd07da96a6\",\"repo\":\"note\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"note\"],\"id\":\"/web/javascript.html\"});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"5f2010891d3a1e43daad\",\"clientSecret\":\"0f1589253938ab880568105760d6cdbd07da96a6\",\"repo\":\"note\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"note\"],\"id\":\"/web/javascript.html\"});gitalk.render(\"gitalk-container\"); "},"web/data-structure.html":{"url":"web/data-structure.html","title":"数据结构","keywords":"","body":"数据结构 JavaScript 版 栈 javascrip 的数组，是数据结构里的顺序栈，支持 push 和 pop 操作 let a = []，初始化一个空栈 a.push(2)，压栈 a.pop())，出栈 栈的应用 题目：括号的最大嵌套深度，来自 leetcode https://leetcode-cn.com/problems/maximum-nesting-depth-of-the-parentheses/ /** * @param {string} s * @return {number} */ var maxDepth = function(s) { const chars = s.split(''); let nums=[], stack=[]; for(let i=0, num=0; i num) num++; } if(chars[i] === ')') { stack.pop(); if(stack.length === 0) { nums.push(num); num = 0; } } } return (nums.length === 0) ? 0 : Math.max(...nums); }; 队列 javascrip 的数组，是数据结构里的顺序队列，支持队列操作 let a = []，初始化一个空队列 a.push(2)，进队 a.shift()，出队 二叉树 Huffman 编码 for(let i=0; i 2017 -  by 王顶. All rights reserved.本站访客人数  人次document.getElementsByClassName(\"bsz-this-year\")[0].innerHTML = new Date().getFullYear(); window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"5f2010891d3a1e43daad\",\"clientSecret\":\"0f1589253938ab880568105760d6cdbd07da96a6\",\"repo\":\"note\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"note\"],\"id\":\"/web/data-structure.html\"});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"5f2010891d3a1e43daad\",\"clientSecret\":\"0f1589253938ab880568105760d6cdbd07da96a6\",\"repo\":\"note\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"note\"],\"id\":\"/web/data-structure.html\"});gitalk.render(\"gitalk-container\"); "},"web/nodejs.html":{"url":"web/nodejs.html","title":"Node.js","keywords":"","body":"Node.js node.js 应用上线 一、pm2 线上环境 用 pm2 确保 linux 重启后，node.js 服务自动重启。 pm2 官网 pm2 自动重启服务 主要是两个动作： 用 pm2 startup 命令产生 systemd service 的配置文件； 用 pm2 start app 启动服务程序； 用 pm2 save 命令保存服务信息； 重启 linux，用 pm2 ls 查看服务是否重启； pm2 重启不成功的可能原因是用了 nvm，导致执行 pm2 没有权限。 参考链接：https://github.com/Unitech/pm2/issues/4580 PM2 keeps getting killed every 90 seconds on centos 8, 解决办法：go to /etc/systemd/system/pm2-user.service - comment PIDFile=... (add a # in front of that line) Puppeteer google 出的无头浏览器 文章 1：https://www.jianshu.com/p/2f04f9d665ce 文章 2：https://www.jb51.net/article/138391.htm 官网：https://github.com/GoogleChrome/puppeteer API：https://github.com/GoogleChrome/puppeteer/blob/master/docs/api.md 应用：Node.js 前端技术，爬虫或者 UI 自动化测试 nvm Node.js 版本管理 nvm Node.js Version Manager Node.js 版本管理有两个工具：nvm 和 n，这两个工具的比对，请看文章：http://taobaofed.org/blog/2015/11/17/nvm-or-n/ 如果想在同一台机器，同时安装多个版本的 Node.js，就需要用到版本管理工具 nvm。 用下面的方式安装 nvm。 curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash 安装以后，nvm 的执行脚本，每次使用前都要激活，建议将其加入 ~/.bashrc文件（假定使用Bash）。激活后，就可以安装指定版本的 Node。 # 安装最新版本 $ nvm install node # 安装指定版本 $ nvm install 6 # 使用已安装的最新版本 $ nvm use node # 使用指定版本的node $ nvm use 0.12 nvm 也允许进入指定版本的 REPL 环境。 $ nvm run 0.12 如果在项目根目录下新建一个 .nvmrc 文件，将版本号写入其中，就只输入 nvm use 命令即可，不再需要附加版本号。 下面是其他经常用到的命令。 # 查看本地安装的所有版本 $ nvm ls # 查看服务器上所有可供安装的版本。 $ nvm ls-remote # 退出已经激活的nvm，使用deactivate命令。 $ nvm deactivate pm2 进程管理 pm2 工具非常强大，是一个生产环境下 Node.js 进程管理工具： GitHub 仓库：https://github.com/Unitech/pm2 可以查看程序的输出日志 pm2 logs, pm2 monit 可以监视代码文件的变更 pm2 start app --watch 代码文件变更之后，会重新启动服务程序 可以在 app 后面增加参数 pm2 start app -- app-argument 安装 selenium webdriver 参考：https://www.npmjs.com/package/selenium-webdriver cd ~ mkdir selenium cd selenium # 安装 Selenium webdriver npm install selenium-webdriver # 检查模块文件夹是否存在 ls 其他 一、sql 随机查询若干条记录 select * from table order by rand() limit 100; 二、web socket 通过 https 客户端用 wss://domain-name:port/； 服务器端用 https.createServer 添加证书； 三、api 服务程序操作证书文件的权限 api 服务程序没有读取证书文件的权限，开始用 root 账户运行服务程序； 检查后发现证书文件 u+r, g 和 o 没有 read 权限，chmod 添加了 read 权限后，user 账户下运行 app.js 没有报错了； 文字教程 教程：https://www.nodejs.red/ Node.js 包教不包会：https://github.com/alsotang/node-lessons 七天学会 NodeJS：https://github.com/nqdeng/7-days-nodejs Node.js 入门：https://cnodejs.org/getstart 张丹的 nodejs 博客：http://blog.fens.me/series-nodejs/ node 大学在线教程：https://nodeschool.io/zh-cn/ 阮一峰的 JavaScript 教程中有 NodeJS 的内容：http://javascript.ruanyifeng.com/nodejs/basic.html 极客学院的 wiki 有 nodejs api 中文：http://wiki.jikexueyuan.com/project/nodejs/ 饿了吗 Node.js 面试题：https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/README.md Node.js 中文社区：https://cnodejs.org/ 程序猿小卡的 Node.js 学习笔记：https://github.com/chyingp/nodejs-learning-guide 一起学 Node.js（有一个完整的大案例）：https://github.com/nswbmw/N-blog 2017 -  by 王顶. All rights reserved.本站访客人数  人次document.getElementsByClassName(\"bsz-this-year\")[0].innerHTML = new Date().getFullYear(); window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"5f2010891d3a1e43daad\",\"clientSecret\":\"0f1589253938ab880568105760d6cdbd07da96a6\",\"repo\":\"note\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"note\"],\"id\":\"/web/nodejs.html\"});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"5f2010891d3a1e43daad\",\"clientSecret\":\"0f1589253938ab880568105760d6cdbd07da96a6\",\"repo\":\"note\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"note\"],\"id\":\"/web/nodejs.html\"});gitalk.render(\"gitalk-container\"); "},"web/web.html":{"url":"web/web.html","title":"WEB","keywords":"","body":"各种 web 技术 jQuery 全屏滚动插件 fullPage.js 示例：http://www.dowebok.com/demo/2014/77/index11.html CDN：http://staticfile.org/ 图片 Demo，见 demo-code 仓库 slide 目录 应用：可以搞教学板书图片的轮播 响应式网页设计 Responsive Web Design 响应式网页设计，自适应网页设计 阮一峰的文章：http://www.ruanyifeng.com/blog/2012/05/responsive_web_design.html 实现要点如下： 媒体查询 @media：https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Media_queries 视口属性 viewpoint：https://developer.mozilla.org/zh-CN/docs/Mobile/Viewport_meta_tag 不使用绝对宽度，使用百分比宽度 字体大小不用绝对值，使用相对大小 em，rem 使用浮动布局 float: right|left 媒体查询，选择性加载 CSS 文件 图片自适应 SEO Search Engine Optimization, SEO 搜索引擎优化 各种搜索引擎爬虫 User Agent：https://www.cnblogs.com/psunny/archive/2010/05/29/1746866.html Chrome 浏览器修改 User Agent 方法： F12 打开开发者工具 点击开发者工具右上角的三个小点 在下拉菜单中点击 More Tools 在 More Tools 菜单中点击 Network conditions User agent 的 Select automatically 勾选去掉 在下拉列表中选择 User agent，可以是 Google 搜索引擎爬虫的 UA 也可以自定义 UA 字符串 favicon.ico 网站图标 作用价值：https://baike.baidu.com/item/favicon.ico/8944811?fr=aladdin 制作方法，如下： 搜索并下载样图，样图最好简洁、明快 编辑样图，去掉图中的多于元素，保证图片长度和宽度像素相等，并保存 图片去背景，把图片变成背景透明图片，可以用在线抠图网站：http://www.aigei.com/bgremover/ 把去背景后的图片变成图标，用在线图标生成网站：http://www.faviconico.org/ 可以选择 128*128 尺寸的图标，因为一般浏览器会缓存 案例：http://sample.wangding.co/ 图标是 S 形状，代表 sample 的意思。 参考资料 https://web.dev/blog/ My Custom CSS Reset：https://www.joshwcomeau.com/css/custom-css-reset/ 网站开发人员应该知道的61件事：http://www.ruanyifeng.com/blog/2010/11/61_things_every_web_developer_should_know.html Best Practices for Speeding Up Your Web Site：https://developer.yahoo.com/performance/rules.html#gzip 前端开发者的基本要求：http://www.cnblogs.com/chyingp/archive/2013/04/25/a-baseline-for-front-end-developers.html 2017 -  by 王顶. All rights reserved.本站访客人数  人次document.getElementsByClassName(\"bsz-this-year\")[0].innerHTML = new Date().getFullYear(); window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"5f2010891d3a1e43daad\",\"clientSecret\":\"0f1589253938ab880568105760d6cdbd07da96a6\",\"repo\":\"note\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"note\"],\"id\":\"/web/web.html\"});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"5f2010891d3a1e43daad\",\"clientSecret\":\"0f1589253938ab880568105760d6cdbd07da96a6\",\"repo\":\"note\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"note\"],\"id\":\"/web/web.html\"});gitalk.render(\"gitalk-container\"); "},"linux/centos.html":{"url":"linux/centos.html","title":"CentOS","keywords":"","body":"CentOS 命令行快捷键 ctrl + a 移动光标到行首 ahead ctrl + e 移动光标到行尾 end ctrl + f 按字符前移（右） forward ctrl + b 按字符后移（左） backward alt + f 按单词前移（右） forward alt + b 按单词后移（左） backward ctrl + w 删除光标前面的一个单词 alt + d 删除光标后面的一个单词 ctrl + k 从光标处删除至命令行尾 ctrl + u 从光标处删除至命令行首 ctrl + r 逆向搜索命令历史 ctrl + d 删除当前字符 ctrl + h 删除光标前一个字符 ctrl + l 窗口清屏，效果等同命令 clear alt + c 从光标处更改为首字符大写的单词 capital alt + u 从光标处更改为全部大写的单词 upper alt + l 从光标处更改为全部小写的单词 lower ctrl + t 交换光标处和之前的字符 alt + t 交换光标处和之前的单词 alt + . 引用上一个命令的最后一个参数，等价于 !$ 在 xshell 中使用 alt 快捷键，需要进行设置，否则会和 window 窗口的快捷键冲突： 常用命令 &：在后台执行 &&：逻辑与 *：匹配任意长度的任意字符 ?：匹配任意一个字符 []：匹配属于字符组的字符 |：管道符，用于连接多个命令，前一个命令的输出作为后一命令的输入 ||：逻辑或 ：输入重定向 >：输出重定向 >>：附加到指定文件的结尾 awk：过滤器 basename：提取基本文件名 cal：显示日历 cat：一次性显示输出文件的全部内容 cd：改变当前工作目录 chgrp：修改文件或目录的用户组 chmod：修改文件或目录的权限 chown：修改文件或目录的所有者 clear：清屏，提示符回到屏幕左上方 cp：复制文件 cut：剪切文件 date：显示当前日期和时间 df：对文件系统的磁盘空间使用情况进行统计 diff：比较两个文件的差异 echo：回显，即将字符串输出到标准输出设备 egrep：支持正则表达式的 grep 命令 file：显示文件的类型 find：查找指定的文件 grep：查找指定的字符串 head：查看文件的开始部分，默认为前 10 行 ls：列出目录中的内容 man：显示联机参考手册 mkdir：创建目录 more：分屏显示文件的内容 mv：移动文件 netstat：显示网络状态 passwd：修改用户密码 ps：显示进程相关信息 pwd：显示当前目录 rm：删除文件 rmdir：删除目录，要求目录非空 sed：流编辑器 sleep：暂停指定的时间间隔 su：临时切换到另一用户 tail：查看文件的结尾部分，默认为后 10 行 Talk：与其他用户对话 vi：vim 编辑器 wc：计算文件的单词数、行数、字符数 who：显示当前登录的用户的信息 write：给指定用户发消息 shutdown -r now，重启 linux 系统 shutdown -h now，关闭 linux 系统 ls -R，显示所有子目录和文件 cat /etc/redhat-release，查看 centOS 版本 rpm -aq，查看本机安装的软件包 ps -ef，查看系统中的进程 which firewalld，查看进程 firewalld 用到的命令 kill pid，杀掉 pid 的进程 kill -9 970，强制删除 970 进程 gsettings set org.gnome.desktop.interface cursor-blink false，设置终端光标不闪烁 passwd wangding，修改当前用户 wangding 账户的密码 sudo hostnamectl --static set-hostname DEV，设置主机名为 DEV hostnamectl status，查看主机名信息 $(cmd)，把 cmd 的运行结果放到其他命令中，例如：echo \"今天是：$(date)\" xxd hello.o，在控制台查看二进制文件 使用 man 命令查看系统调用 man 2 read 或者是 man 3 read。中间的数字是什么意思呢？是man的分卷号，原来man分成很多部分，分别是： 1 用户命令，可由任何人启动的 2 系统调用，即由内核提供的函数 3 例程，即库函数，比如标准 C 库 libc 4 设备，即 /dev 目录下的特殊文件 5 文件格式描述，例如：/etc/passwd 6 游戏 7 杂项，例如宏命令包、惯例等 8 系统管理员工具，只能由 root 启动 9 其他（Linux 特定的），用来存放内核例行程序的文档 n 新文档，可能要移到更适合的领域 o 老文档，可能会在一段期限内保留 l 本地文档，与本特定系统有关的 要查属于哪一部分的，就用哪一部分的编号在命令之前。 一般系统没有 man 命令，如果只安装 man，就只能查看第一部分（命令），如： yum install man -y 如果要查看函数，也就是后面的部分，还需要安装 man-pages yum install man-pages -y yum install man-pages-zh-CN -y CentOS 查看系统版本 uname -a cat /etc/redhat-release diff 比较文件之间的差异。 # -y 参数平铺文档 # -b 忽略空格差异 # -B 忽略空行差异 diff a.c b.c -y -b -B 比较结果的符号说明： “|”表示前后2个文件内容有不同 “ “>”表示后面文件比前面文件多了1行内容 linux bash 邮件客户端 yum -y install sendmail yum -y install mailx sudo yum -y install mailx sendmail mail -s 'test' 408532507@qq.com 查看进程树 pstree 查看进程树 yum install psmisc -y（安装 pstree） ps -ef （可以看到 ppid） ps -ajx （可以查看进程组号） scp 命令 # 复制文件到远程主机 scp /path/file root@ipaddr:/path/ # 例如： scp index.js wangding@192.168.59.148:/home/wangding/wd/auto/ # 从远程主机复制文件到本地 scp root@ipaddr:/path/file . # 例如： scp wangding@192.168.59.144:/home/wangding/wd/auto/index.js . 安装卸载程序 yum list installed，列出已经安装的软件包 yum list，列出已安装的和可安装的应用程序包 yum list package，列出 package 应用的安装情况 yum clean，清除缓存的软件包信息 /etc/yum.repos.d/\\*.repo，yum 源定义文件 yum install package，安装 package yum remove package，删除 package yum update package，升级 package yum list updates，列出所有可以升级的软件包 启动服务 systemctl start mariadb，启动 mariadb 数据库服务 systemctl start httpd，启动 apache 服务 systemctl status httpd，查询 apache 服务是否启动 systemctl restart httpd，重新启动 apache 服务 apache 服务启动不正常的解决办法，firewall-cmd --add-service=http 开启 centOS 的防火墙端口 # 虚拟机本身可以打开页面 curl http://192.168.29.129:1337 # 宿主计算机的浏览器却不能打开页面 # 由此判断是 Linux 的防火墙没有打开端口 firewall-cmd --permanent --add-port=1337/tcp firewall-cmd --reload sudo firewall-cmd --zone=public --list-ports # 上面的命令列出本机防火墙打开的所有端口 用户、组和文件权限 useradd wangding，添加新用户 wangding vipw，命令查看系统中的用户，一般新添加的用户都在文件的最后一行 查看的信息包括：用户 ID 和主 ID，用户家目录，用户的 shell groupadd abc，添加 abc 用户组 vigr，命令查看用户组的信息，vipw 命令和 vigr 命令是有规律的，vi 代表 vi 编辑器，其实是用 vi 编辑器查看信息的。pw 代表 password 用户，gr 代表 group 用户组。查看的信息包括：组的 ID 和组的成员。 gpasswd -a username groupname，把用户加到组中 groups wangding，查看用户 wangding 所在的用户组信息 whoami，查看当前登录的用户 su - 切换到 root 用户，su 是 switch user 的缩写 su - wangding，将当前用户环境切换到 wangding 用户环境下面，退出用 exit userdel wangding，删除用户 wangding groupdel，删除组 id root，查看 root 用户的 ID 值，ID 值越小权限越大 chmod permission filename，修改文件权限 permission：r=4, w=2, x=1, rw=4+2=6, rx=4+1=5, 等等，用户权限，组权限和其他用户权限，按顺序依次为三个组 chown user filename，改变文件或目录的所有者，ch: change, own：owner chgrp group filename，改变文件或目录的组名 chown user.group filename，改变文件或目录的所有者为 group 组的 user 用户 常用网络命令 ssh，远程登录或执行远程主机上的命令，参考链接：https://www.ruanyifeng.com/blog/2011/12/ssh_remote_login.html hostname ping ifconfig iwconfig nslookup telnet netstat nc，net cat，参考链接：http://www.linuxso.com/command/nc.html lsof，list open file，参考链接：https://www.jianshu.com/p/a3aa6b01b2e1 crontab 定时任务 【参考资料】 https://www.cnblogs.com/peida/archive/2013/01/08/2850483.html sudo crontab -e -u wangding # -e 编辑某个用户的 crontab，如果不指定用户，则编辑当前用户的 crontab 文件，-u user 用来设定某个用户的 crontab 服务 sudo crontab -l -u wangding # 查看某个用户的 crontab 文件内容 sudo crontab -r -u wangding # 删除某个用户的 crontab 文件内容 crontab 文件的内容 * * * * * command # 分钟 小时 日 月 星期几 特殊符号： *: 代表说有可能值 , : 代表一个列表范围，例如：1, 3, 5, 7 : 代表一个整数范围，例如：2-6，表示 2, 3, 4, 5, 6 / : 代表指定时间的间隔频率：例如：*/2 在分钟位置，每隔两分钟执行一次 查看 crontab 日志，来排错： 排错的另一个经验，可以先在特定目录下，执行 crontab 中的命令，目录最好都用绝对路径，命令执行成功之后，再考虑定时执行。 cd /var/log sudo less /var/log/cron.log curl 常用参数 GET 请求 URL：curl http://localhost:8080 POST 请求 URL：curl -X POST http://localhost:8080 -d \"item=abc\" curl 默认请求方法是 GET，修改请求方法的参数是 -X，例如：curl -X PUT http://localhost:8080 curl 的 -v 参数，除了可以看到响应体，还可以看到请求头和响应头，当然 curl -i 参数可以看到响应头的，-v 参数打印信息的时候，请求头和响应头前面的前导符号是大于号和小于号，正好相反，反映了数据发送的两个方向，设计的很细腻。 curl -H 参数可以定制请求头信息，例如：curl -H \"Content-Type:appliction/json\" http://localhost:8080，如果需要多个自定义的头字段，就多加几个 -H 参数，一个 -H 参数跟一个头字段信息 综合起来，curl POST 发送 JSON 数据的命令：例如：curl -H \"Content-Type:application/json\" -X POST -d '{\"name\":\"wangding\",\"age\":\"41\"}' curl -F，参数可以上传文件，参数格式：-F 'file=@file-path'，例如：curl -F 'file=@/usr/bin/node' http://localhost:8080 curl -c cookie.txt url，访问 url 获得服务器给的 cookie 并存放到 cookie.txt 文件中 curl -b cookie.txt url，访问 url 的同时，将 cookie 作为请求头发送给服务器 curl -b cookie.txt -c cookie.txt url，同时发送 cookie，并接收服务器的 cookie ZSH 的 z 命令 z 命令可以快速完成目录切换 z，列出所有最近访问过的路径及权重，权重越大，越优先匹配 z -l [keyword]，列出匹配 keyword 的路径及权重，keyword 可以是一个字母 z -t [keyword]，跳转到最近使用的 keyword 路径，即使 keyword 权重较低 zsh 的用法，为什么说 zsh 是 shell 中的极品？ yum 设置 # 设置从本地（虚拟机挂载的 iso 镜像）安装源安装软件 # 需要提前挂载 CD-ROM # 并且禁用网络源，需要把 CentOS-Base.repo 文件改名为 CentOS-Base.repo.bak # yum 的配置文件分为两部分：main 和 repository # main 部分定义了全局配置选项，整个yum 配置文件应该只有一个 main。常位于 /etc/yum.conf 中 # repository 部分定义了每个源/服务器的具体配置，可以有一到多个。常位于/etc/yum.repo.d 目录下的各文件中。 cd /etc/yum.repos.d/ ls # 会看到四个 repo 文件，其中： # CentOS-Base.repo 是yum 网络源的配置文件 # CentOS-Media.repo 是yum 本地源的配置文件 # 修改 CentOS-Media.repo # 在 baseurl 中修改第 2 个路径为 /mnt/cdrom（即为光盘挂载点） # 将 enabled=0 改为 1 # 运行 yum install 命令，net-tools 安装包中包括 ifconfig 命令 yum install net-tools # 设置国内的 yum 源（略），请参考文章：http://www.cnblogs.com/mchina/archive/2013/01/04/2842275.html Linux 如何关机 # 1、执行命令“who”查看目前在线用户 who # 2、执行命令“netstat -a”看网络的联机状态 netstat -a # 3、执行命令“ps -aux”查看后台执行的程序 ps -aux # 4、惯用的关机命令：shutdown shutdown -h # or poweroff Linux 如何挂载 CD-ROM # 确保 /mnt/ 目录下面有 cdrom/ 文件夹 mkdir /mnt/cdrom # 挂载 CD-ROM mount /dev/cdrom /mnt/cdrom 网络设置 vi /etc/sysconfig/network-scripts/ifcfg-ens32 # 地址是否自动获得 none 不自动获得，否则 dhcp 为自动获得 BOOTPROTO=dhcp # 是否自动加载 ONBOOT=yes 启用 OpenSSH 参考：http://wangsheng1.blog.51cto.com/29473/1548853/ 常见问题 用户 sudo 不在 sudoers 用户组中的问题 http://blog.csdn.net/attagain/article/details/11987297 字体美化 http://www.jinbuguo.com/gui/fonts.conf.html tmux tmux 的安装和使用： sudo yum install -y libevent-devel ncurses-devel sudo yum install -y tmux tmux 一堆快捷键，请参考：http://blog.csdn.net/hcx25909/article/details/7602935 http://cenalulu.github.io/linux/tmux/ strace 的用法 安装：yum install -y strace 使用：ls xxx strace -eopen ls locale 的用法 参考资料： http://blog.chinaunix.net/uid-20726500-id-4662320.html 通过 xshell windows 给 linux 虚拟机上传文件 http://www.linuxidc.com/Linux/2015-05/117975.htm linux 查找文件内容 grep \"hello\" ./*.js # 在当前目录的所有 js 文件中查找 hello 字符串 搭建 apache 服务器 # 安装软件 sudo yum install -y httpd # 开通端口 sudo firewall-cmd --add-service=http sudo firewall-cmd --permanent --add-port=80/tcp sudo firewall-cmd --reload # 启动服务 systemctl enable httpd.service systemctl start httpd.service # 浏览器测试，应该能看到测试网页 http://ip_addr/ # 配置 apache，编辑 /etc/httpd/conf/httpd.conf 配置文件 搭建 lighttpd 服务器 # 安装文件 sudo yum install -y epel-release sudo yum update sudo yum install -y lighttpd, gitweb # lighttpd 是 web 服务器，gitweb 是网站代码，或者网站程序 export 命令的用法 1、执行脚本时是在一个子shell环境运行的，脚本执行完后该子shell自动退出； 2、一个shell中的系统环境变量才会被复制到子shell中（用export定义的变量）； 3、一个shell中的系统环境变量只对该shell或者它的子shell有效，该shell结束时变量消失（并不能返回到父shell中）。 4、不用export定义的变量只对该shell有效，对子shell也是无效的。 # 实验，验证 export 命令的用法 test='hello' echo $test vi a.sh # --- 以下是 a.sh 中的内容 #!/usr/bin/sh echo $PATH echo $test # --- a.sh 内容结束 chmod u+x a.sh ./a.sh # 看不到 test 变量的值 export test ./a.sh # 可以看到 test 变量的值 参考资料 快乐的 Linux 命令行 Bash 快捷键大全 http://webres.wang/the-art-of-command-line/ http://webres.wang/list-10-funny-linux-commands/ 操作系统：https://github.com/sunym1993/flash-linux0.11-talk linux 性能分析：https://zhuanlan.zhihu.com/p/35879028 笨办法学 linux 视频：https://v.qq.com/biu/videoplus?vuid=327037319 LFS 中文：https://lctt.github.io/LFS-BOOK/lfs-sysv/LFS-BOOK.html 2017 -  by 王顶. All rights reserved.本站访客人数  人次document.getElementsByClassName(\"bsz-this-year\")[0].innerHTML = new Date().getFullYear(); window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"5f2010891d3a1e43daad\",\"clientSecret\":\"0f1589253938ab880568105760d6cdbd07da96a6\",\"repo\":\"note\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"note\"],\"id\":\"/linux/centos.html\"});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"5f2010891d3a1e43daad\",\"clientSecret\":\"0f1589253938ab880568105760d6cdbd07da96a6\",\"repo\":\"note\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"note\"],\"id\":\"/linux/centos.html\"});gitalk.render(\"gitalk-container\"); "},"linux/bash.html":{"url":"linux/bash.html","title":"Shell 脚本编程","keywords":"","body":"Shell 脚本编程 30 分钟入门 什么是 Shell 脚本 示例 看个例子吧： #!/bin/sh cd ~ mkdir shell_tut cd shell_tut for ((i=0; i 示例解释 第1行：指定脚本解释器，这里是用 /bin/sh 做解释器的 第2行：切换到当前用户的 home 目录 第3行：创建一个目录 shell_tut 第4行：切换到 shell_tut 目录 第5行：循环条件，一共循环 10 次 第6行：创建一个 test_0…9.txt 文件 第7行：循环体结束 mkdir, touch 都是系统自带的程序，一般在 /bin 或者 /usr/bin 目录下。for, do, done 是 sh 脚本语言的关键字。 shell 和 shell 脚本的概念 shell 是指一种应用程序，这个应用程序提供了一个界面，用户通过这个界面访问操作系统内核的服务。Ken Thompson 的 sh 是第一种 Unix Shell，Windows Explorer 是一个典型的图形界面 Shell。 shell 脚本（shell script），是一种为 shell 编写的脚本程序。业界所说的 shell 通常都是指 shell 脚本，但读者朋友要知道，shell 和 shell script 是两个不同的概念。由于习惯的原因，简洁起见，本文出现的 “shell 编程”都是指 shell 脚本编程，不是指开发 shell 自身（如 Windows Explorer 扩展开发）。 环境 shell 编程跟 java、php 编程一样，只要有一个能编写代码的文本编辑器和一个能解释执行的脚本解释器就可以了。 OS 当前主流的操作系统都支持 shell 编程，本文档所述的 shell 编程是指 Linux 下的 shell，讲的基本都是 POSIX 标准下的功能，所以，也适用于 Unix 及 BSD（如 Mac OS）。 Linux Linux 默认安装就带了 shell 解释器。 Mac OS Mac OS 不仅带了 sh、bash 这两个最基础的解释器，还内置了 ksh、csh、zsh 等不常用的解释器。 Windows上的模拟器 windows 出厂时没有内置 shell 解释器，需要自行安装，为了同时能用 grep, awk, curl 等工具，最好装一个 cygwin 或者 mingw 来模拟 linux 环境。 cygwin mingw 脚本解释器 sh 即 Bourne shell，POSIX（Portable Operating System Interface）标准的 shell 解释器，它的二进制文件路径通常是 /bin/sh，由 Bell Labs 开发。 本文讲的是 sh，如果你使用其它语言用作 shell 编程，请自行参考相应语言的文档。 bash Bash 是 Bourne shell 的替代品，属 GNU Project，二进制文件路径通常是 /bin/bash。业界通常混用 bash、sh、和 shell，比如你会经常在招聘运维工程师的文案中见到：熟悉 Linux Bash 编程，精通 Shell 编程。 在 CentOS 里，/bin/sh 是一个指向 /bin/bash 的符号链接: [root@centosraw ~]# ls -l /bin/*sh -rwxr-xr-x. 1 root root 903272 Feb 22 05:09 /bin/bash -rwxr-xr-x. 1 root root 106216 Oct 17 2012 /bin/dash lrwxrwxrwx. 1 root root 4 Mar 22 10:22 /bin/sh -> bash 但在 Mac OS 上不是，/bin/sh 和 /bin/bash 是两个不同的文件，尽管它们的大小只相差 100 字节左右: iMac:~ wuxiao$ ls -l /bin/*sh -r-xr-xr-x 1 root wheel 1371648 6 Nov 16:52 /bin/bash -rwxr-xr-x 2 root wheel 772992 6 Nov 16:52 /bin/csh -r-xr-xr-x 1 root wheel 2180736 6 Nov 16:52 /bin/ksh -r-xr-xr-x 1 root wheel 1371712 6 Nov 16:52 /bin/sh -rwxr-xr-x 2 root wheel 772992 6 Nov 16:52 /bin/tcsh -rwxr-xr-x 1 root wheel 1103984 6 Nov 16:52 /bin/zsh 高级编程语言 理论上讲，只要一门语言提供了解释器（而不仅是编译器），这门语言就可以胜任脚本编程，常见的解释型语言都是可以用作脚本编程的，如：Perl、Tcl、Python、PHP、Ruby。Perl 是最老牌的脚本编程语言了，Python 这些年也成了一些 linux 发行版的预置解释器。 编译型语言，只要有解释器，也可以用作脚本编程，如 C shell 是内置的（/bin/csh），Java 有第三方解释器 Jshell，Ada 有收费的解释器 AdaScript。 如下是一个 PHP Shell Script 示例（假设文件名叫 test.php）： #!/usr/bin/php 执行： /usr/bin/php test.php 或者： chmod +x test.php ./test.php 如何选择 shell 编程语言 熟悉 vs 陌生 如果你已经掌握了一门编程语言（如 PHP、Python、Java、JavaScript），建议你就直接使用这门语言编写脚本程序，虽然某些地方会有点啰嗦，但你能利用在这门语言领域里的经验（单元测试、单步调试、IDE、第三方类库）。 新增的学习成本很小，只要学会怎么使用 shell 解释器（Jshell、AdaScript）就可以了。 简单 vs 高级 如果你觉得自己熟悉的语言（如 Java、C）写 shell 脚本实在太啰嗦，你只是想做一些备份文件、安装软件、下载数据之类的事情，学着使用 sh，bash 会是一个好主意。 shell 只定义了一个非常简单的编程语言，所以，如果你的脚本程序复杂度较高，或者要操作的数据结构比较复杂，那么还是应该使用 Python、Perl 这样的脚本语言，或者是你本来就已经很擅长的高级语言。因为 sh 和 bash 在这方面很弱，比如说： 它的函数只能返回字串，无法返回数组 它不支持面向对象，你无法实现一些优雅的设计模式 它是解释型的，一边解释一边执行，连 PHP 那种预编译都不是，如果你的脚本包含错误(例如调用了不存在的函数)，只要没执行到这一行，就不会报错 环境兼容性 如果你的脚本是提供给别的用户使用，使用 sh 或者 bash，你的脚本将具有最好的环境兼容性，perl 很早就是 linux 标配了，python 这些年也成了一些 linux 发行版的标配，至于 mac os，它默认安装了 perl、python、ruby、php、java 等主流编程语言。 第一个 shell 脚本 编写 打开文本编辑器，新建一个文件，扩展名为 sh（sh 代表 shell），扩展名并不影响脚本执行，见名知意就好，如果你用 php 写 shell 脚本，扩展名就用 php 好了。 输入一些代码，第一行一般是这样： #!/bin/bash #!/usr/bin/php “#!”是一个约定的标记，它告诉系统这个脚本需要什么解释器来执行。 运行 运行 Shell 脚本有两种方法： 作为可执行程序 chmod +x test.sh ./test.sh 注意，一定要写成 ./test.sh，而不是 test.sh，运行其它二进制的程序也一样，直接写 test.sh，linux 系统会去 PATH 里寻找有没有叫 test.sh 的，而只有 /bin, /sbin, /usr/bin，/usr/sbin 等在 PATH 里，你的当前目录通常不在 PATH 里，所以写成 test.sh 是会找不到命令的，要用 ./test.sh 告诉系统说，就在当前目录找。 通过这种方式运行 bash 脚本，第一行一定要写对，好让系统查找到正确的解释器。 这里的\"系统\"，其实就是 shell 这个应用程序（想象一下 Windows Explorer），但我故意写成系统，是方便理解，既然这个系统就是指 shell，那么一个使用 /bin/sh 作为解释器的脚本是不是可以省去第一行呢？是的。 作为解释器参数 这种运行方式是，直接运行解释器，其参数就是 shell 脚本的文件名，如： /bin/sh test.sh /bin/php test.php 这种方式运行的脚本，不需要在第一行指定解释器信息，写了也没用。 变量 定义变量 定义变量时，变量名不加美元符号（$），如： your_name=\"qinjx\" 注意，变量名和等号之间不能有空格，这可能和你熟悉的所有编程语言都不一样。 除了显式地直接赋值，还可以用语句给变量赋值，如： for file in `ls /etc` 使用变量 使用一个定义过的变量，只要在变量名前面加美元符号即可，如： your_name=\"qinjx\" echo $your_name echo ${your_name} 变量名外面的花括号是可选的，加不加都行，加花括号是为了帮助解释器识别变量的边界，比如下面这种情况： for skill in Ada Coffe Action Java; do echo \"I am good at ${skill}Script\" done 如果不给 skill 变量加花括号，写成 echo \"I am good at $skillScript\"，解释器就会把 $skillScript 当成一个变量（其值为空），代码执行结果就不是我们期望的样子了。 推荐给所有变量加上花括号，这是个好的编程习惯。IntelliJ IDEA 编写 shell script 时，IDE 就会提示加花括号。 重定义变量 已定义的变量，可以被重新定义，如： your_name=\"qinjx\" echo $your_name your_name=\"alibaba\" echo $your_name 这样写是合法的，但注意，第二次赋值的时候不能写 $your_name=\"alibaba\"，使用变量的时候才加美元符。 注释 以“#”开头的行就是注释，会被解释器忽略。 多行注释 sh 里没有多行注释，只能每一行加一个 # 号。就像这样： #-------------------------------------------- # 这是一个自动打 ipa 的脚本，基于 webfrogs 的 ipa-build 书写：https://github.com/webfrogs/xcode_shell/blob/master/ipa-build # 功能：自动为 etao ios app 打包，产出物为 14 个渠道的 ipa 包 # 特色：全自动打包，不需要输入任何参数 #-------------------------------------------- ##### 用户配置区 开始 ##### # # # 项目根目录，推荐将此脚本放在项目的根目录，这里就不用改了 # 应用名，确保和 Xcode 里 Product 下的 target_name.app 名字一致 # ##### 用户配置区 结束 ##### 如果在开发过程中，遇到大段的代码需要临时注释起来，过一会儿又取消注释，怎么办呢？每一行加个 # 符号太费力了，可以把这一段要注释的代码用一对花括号括起来，定义成一个函数，没有地方调用这个函数，这块代码就不会执行，达到了和注释一样的效果。 字符串 字符串是 shell 编程中最常用最有用的数据类型（除了数字和字符串，也没啥其它类型好用了，哈哈），字符串可以用单引号，也可以用双引号，也可以不用引号。单双引号的区别跟PHP类似。 单引号 str='this is a string' 单引号字符串的限制： 单引号里的任何字符都会原样输出，单引号字符串中的变量是无效的 单引号字串中不能出现单引号（对单引号使用转义符后也不行） 双引号 your_name='qinjx' str=\"Hello, I know your are \\\"$your_name\\\"! \\n\" 双引号里可以有变量 双引号里可以出现转义字符 字符串操作 拼接字符串 your_name=\"qinjx\" greeting=\"hello, \"$your_name\" !\" greeting_1=\"hello, ${your_name} !\" echo $greeting $greeting_1 获取字符串长度： string=\"abcd\" echo ${#string} #输出：4 提取子字符串 string=\"alibaba is a great company\" echo ${string:1:4} #输出：liba 查找子字符串 string=\"alibaba is a great company\" echo `expr index \"$string\" is`#输出：3，这个语句的意思是：找出字母i在这名话中的位置，要在linux下运行，mac下会报错 更多 参见本文档末尾的参考资料中 Advanced Bash-Scripting Guid Chapter 10.1 数组 管道 条件判断 流程控制 和 Java、PHP 等语言不一样，sh 的流程控制不可为空，如： 在 sh/bash 里可不能这么写，如果 else 分支没有语句执行，就不要写这个 else。 还要注意，sh 里的 if [ $foo -eq 0 ]，这个方括号跟 Java/PHP 里 if 后面的圆括号大不相同，它是一个可执行程序（和 ls, grep 一样），想不到吧？在 CentOS 上，它在 /usr/bin 目录下： ll /usr/bin/[ -rwxr-xr-x. 1 root root 33408 6月 22 2012 /usr/bin/[ 正因为方括号在这里是一个可执行程序，方括号后面必须加空格，不能写成 if [$foo -eq 0] if else if if condition then command1 command2 ... commandN fi 写成一行（适用于终端命令提示符）： if `ps -ef | grep ssh`; then echo hello; fi 末尾的 fi 就是 if 倒过来拼写，后面还会遇到类似的 if else if condition then command1 command2 ... commandN else command fi if else-if else if condition1 then command1 elif condition2 command2 else commandN fi for while for 在开篇的示例里演示过了： for var in item1 item2 ... itemN do command1 command2 ... commandN done 写成一行： for var in item1 item2 ... itemN; do command1; command2… done; C风格的for for (( EXP1; EXP2; EXP3 )) do command1 command2 command3 done while while condition do command done 无限循环 while : do command done 或者 while true do command done 或者 for (( ; ; )) until until condition do command done case case \"${opt}\" in \"Install-Puppet-Server\" ) install_master $1 exit ;; \"Install-Puppet-Client\" ) install_client $1 exit ;; \"Config-Puppet-Server\" ) config_puppet_master exit ;; \"Config-Puppet-Client\" ) config_puppet_client exit ;; \"Exit\" ) exit ;; * ) echo \"Bad option, please choose again\" esac case 的语法和 C family 语言差别很大，它需要一个 esac（就是 case 反过来）作为结束标记，每个 case 分支用右圆括号，用两个分号表示 break 函数 定义 调用 文件包含 可以使用 source 和.关键字，如： source ./function.sh . ./function.sh 在 bash 里，source 和 . 是等效的，他们都是读入 function.sh 的内容并执行其内容（类似 PHP 里的 include），为了更好的可移植性，推荐使用第二种写法。 包含一个文件和执行一个文件一样，也要写这个文件的路径，不能光写文件名，比如上述例子中: . ./function.sh 不可以写作： . function.sh 如果 function.sh 是用户传入的参数，如何获得它的绝对路径呢？方法是： real_path=`readlink -f $1`#$1是用户输入的参数，如function.sh . $real_path 用户输入 执行脚本时传入 脚本运行中输入 select 菜单 stdin 和 stdout 常用的命令 sh 脚本结合系统命令便有了强大的威力，在字符处理领域，有 grep、awk、sed 三剑客，grep 负责找出特定的行，awk 能将行拆分成多个字段，sed 则可以实现更新插入删除等写操作。 ps 查看进程列表 grep 排除 grep 自身 查找与 target 相邻的结果 awk sed 插入 替换 删除 xargs curl 综合案例 参考资料 Advanced Bash-Scripting Guide，非常详细，非常易读，大量 example，既可以当入门教材，也可以当做工具书查阅 Unix Shell Programming Linux Shell Scripting Tutorial - A Beginner's handbook 2017 -  by 王顶. All rights reserved.本站访客人数  人次document.getElementsByClassName(\"bsz-this-year\")[0].innerHTML = new Date().getFullYear(); window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"5f2010891d3a1e43daad\",\"clientSecret\":\"0f1589253938ab880568105760d6cdbd07da96a6\",\"repo\":\"note\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"note\"],\"id\":\"/linux/bash.html\"});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"5f2010891d3a1e43daad\",\"clientSecret\":\"0f1589253938ab880568105760d6cdbd07da96a6\",\"repo\":\"note\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"note\"],\"id\":\"/linux/bash.html\"});gitalk.render(\"gitalk-container\"); "},"linux/docker.html":{"url":"linux/docker.html","title":"docker","keywords":"","body":"docker Docker 概述 Docker 是什么 Docker 不是编程语言 Docker 不是软件架构 Docker 不是虚拟机，是 Linux 上的工具软件。Docker 的开销比虚拟机小。 Docker 是一套工具软件，包括：命令行，服务程序和一组远程服务。 Docker 解决常见的软件问题：安装、运行、发布和删除。 Docker 基本概念 Docker 提供隔离的环境让软件运行其中，这个隔离的环境就是容器。 Docker 提供软件发布的方式，发布的形式是镜像。 传统的软件发布方式是源代码或者二进制可执行程序，基于 Docker 的软件发布方式是镜像。 传统的软件构建是生成可执行的二进制程序，基于 Docker 的软件构建是构建镜像。 travis-ci 构建镜像，并发布到 docker hub 上，见：docker-demo 的 12-travis-ci 分支。 镜像相当于软件包，包含软件以及软件运行的环境（依赖）。 启动镜像（本地没有镜像，会自动拉取），软件即可使用。免去了软件的安装，以及依赖的安装过程 容器是镜像运行时的形态。 容器是 Docker 服务程序的子进程，每个子进程只能访问自己的内存空间和资源。形成了隔离的运行环境，就是容器，好比是一个一个的罐头瓶。 Docker 英文单词是码头工人，码头工人在码头装卸集装箱。Docker 镜像或容器，好比集装箱。集装箱里的东西，就是软件及其运行环境（依赖）。所有软件及其依赖使用起来，各不相同。但是一旦放到集装箱里面了（封装成镜像或容器后），操作方式就相同了。 从这个角度来看，docker 提供了一层抽象，以后安装任何软件，操作方式都相同了，都是操作镜像。 容器技术的底层是 Linux 命名空间和 cgroups。Docker 不提供容器技术，但是它使得容器更易于使用。 cgroups 是 2007 年出现的技术，docker 是 2013 年出现的技术。 容器的运行状态跟容器内单次运行的程序状态相关联。如果程序运行，则容器运行；如果程序退出，则容器退出。 Docker 可以运行在 Linux, OS X 和 Windows 上，因此镜像软件可以运行在任何操作系统上，Docker 提供了软件的可移植性。 linux 内核的两大隔离手段 命名空间（name space）用来产生隔离，可以解决资源冲突问题。例如：web-app-a 监听 80 端口和 web-app-b 监听 80 端口，就会冲突。而隔离的 NET 命名空间，两个 app 所在的容器，有各自独立的 IP 地址，就解决了端口冲突问题。 ns: name space，命名空间，提供各种资源的隔离，共有以下六种： PID 命名空间——进程标识符，提供进程隔离 UTS 命名空间——主机名和域名，提供主机名隔离（UTS：UNIX Time-sharing System） MNT 命名空间——文件系统访问，提供磁盘挂载点和文件系统隔离 IPC 命名空间——共享内存的进程间通信，提供进程间通信隔离 NET 命名空间——网络访问，提供网络隔离 USR 命名空间——用户名标识，提供用户隔离 cgroups——资源保护，实现访问控制 其他： chroot() ——文件系统根目录，比较早的技术，跟 MNT 命名空间功能类似 容器进程系统抽象和隔离 pid 是 process id，进程的唯一标识。 pid 命名空间会包含自己的 pid1, pid2，... 为每个容器创建一个独立的 PID 空间，是 Docker 隔离操作的一个方面。 --pid host 容器使用宿主的 PID 空间，不使用隔离的 PID 命名空间。 这个功能不是重点，默认正常使用就行，不用特殊设置和调整。 镜像层 镜像是分层的，镜像实际是镜像层的集合。 一个镜像层至少和一个其他镜像关联。 分层之间是有依赖关系的，顶层依赖与底层，或者子层依赖于父层。 假设 node-app-a 和 node-app-b 两个镜像都依赖基础镜像 nodejs:alpine。安装 node-app-a 镜像时，会安装基础镜像以及 node-app-a 的镜像层。安装 node-app-b 时，基础镜像本地已经有了，则只下载安装 node-app-b 镜像层。这样会提高镜像下载和安装的速度。 公共层只需要下载安装一次。 分层提供了用于依赖管理和隔离的工具。通过检查镜像和分层可以识别每层安装的软件。 只要在某些基础镜像上，做一些稍微的变化，就可以方便的构建新的镜像软件，这个过程就是在一层一层的搭积木。 容器文件系统抽象和隔离 容器中正在运行的程序对镜像分层一无所知，仿佛操作不是发生在容器中或者镜像层上。 从容器的角度看，它具有由镜像层所提供文件的独占副本，这就是所谓的 union 文件系统。 Docker 支持多种 union 文件系统，并给出适合你的最佳选择。 union 文件系统是创建有效文件系统隔离极为关键的一套工具，其他工具还有 MNT 命名空间和 chroot 系统调用。 chroot 是 change root，用来改变根目录的挂载点，可以把某个目录挂载为根路径，这个技术很早就有了。 mnt 可以为某进程设置某目录为根挂载点，形成文件系统的抽象和隔离。 union 文件系统使用写时复制的模式，使得内存映射文件（mmap 的系统调用）的实现比较困难。 容器的目录树是由一组挂载点创建而成，这些挂载点描述了如何构建出一个或多个文件系统。 存储卷是容器目录树上的挂载点。 union 文件系统适用于创建和分享镜像，但对持久化或共享数据，并不是理想的方法，存储卷能很好的解决这些问题。 存储卷提供与容器无关的数据管理方式。 容器的文件系统分两大类：镜像分层 union 文件系统（生命周期跟着容器）和存储卷（生命周期脱离容器）。 镜像分层适合打包和分发相对静态的文件，例如：程序源代码或者可执行程序。 存储卷适合管理程序运行时，动态产生的数据。 存储卷的类型 存储卷的生命周期独立于被挂载到的容器。 存储卷有两种类型，bind 存储卷和 volume 存储卷。 挂载 bind 存储卷，docker 命令参数：-v 主机路径:容器路径。 bind 存储卷使用用户提供的目录或文件，注意，上面的 -v 参数，不论主机路径还是容器路径，都是绝对路径。 volume 存储卷由 Docker 服务程序管理的特定目录，路径是：/var/lib/docker/volumes//_data。 挂载 volume 存储卷，docker 命令参数：-v 容器路径，不用指定主机路径，注意，容器路径是绝对路径。 bind 存储卷可以在容器和主机之间共享数据，例如：开发网站静态页面，将项目目录挂载到 nginx 容器网站根路径，对于 nginx:alpine 镜像这个路径是 /usr/share/nginx/html/。 只读 bind 存储卷，-v 主机路径：容器路径:ro。只读 bind 存储卷，容器中的程序不能修改，存储卷中的内容。 bind 存储卷，不止可以挂载目录，也可以挂载文件。volume 存储卷只能挂载目录。 bind 存储卷，可以挂载主机的任何路径。volume 存储卷只能挂载 docker 管理的路径，挂载时不能指定要挂载的主机路径。 多个同一镜像的容器，都使用相同的 bind 存储卷，挂载到相同的主机目录，可能会导致冲突。volume 存储卷就不会发生这样的问题。 volume 存储卷使用和管理的成本更低。docker system df -v 可以检查存储卷占用的空间，docker volume 可以删除无用的 volume 存储卷。 删除容器时 docker rm -v ，-v 参数可以一并将该容器挂载的 volume 存储卷一并删除。所以，volume 卷的维护成本低。 如果删除容器时，没有使用 -v 参数，则这个容器之前挂载的 volume 卷就成了孤立卷。孤立卷会逐步蚕食 docker 存储空间，最终将导致存储空间不足。 宿主机和容器之间共享数据，使用 bind 存储卷和 volume 存储卷都可以。 容器和容器之间共享文件，有两种方案： 使用 bind 存储卷，多个容器挂载到同一个主机目录。注意，当容器过多时，同时操作相同的文件可能会出问题。读写分离的容器可能问题会好很多，例如：一个容器负责写数据，一个容器负责读数据，问题不大。如果两个以上的容器都要写数据，就会导致冲突发生。 使用存储卷容器，其他容器使用 --volume-from 链接到存储容器上。一个容器可以 --volume-from 多个存储容器。 容器和容器之间共享数据的方案，最好是使用数据库容器，多个应用容器连接到数据库容器。 --volumes-from 会将存储容器中挂载的卷（无论哪种类型），复制到目标容器中。复制卷总是具有相同的挂载点。复制卷不能修改卷的读写模式。 卷容器，是一个容器，只提供卷的句柄。卷容器不需要运行，因为停止的卷容器仍能保证存储卷的引用。卷容器一般使用 volume 存储卷，而不使用 bind 存储卷。 数据打包的存储卷容器，是卷容器的一种用法。利用容器将镜像中的静态资源，复制到其挂载的存储卷中。这个存储卷通过 --volumes-from 与其他目标容器之间，实现数据分发。通常用于分发的数据可能是：关键架构信息，如：配置、密钥或代码，等。 多态工具是以一致性的方式进行交互，但可能有多个实现，分别做不同的事情。使用存储卷，你可以注入不同的行为到容器中，而无需修改其镜像。 常见的资源冲突 两个程序监听相同的端口号。 两个程序使用相同的临时文件名和文件锁。 两个程序使用不同版本且全局安装的库。 同一个程序的两个副本使用相同的 PID 文件。 第二个程序修改了，第一个程序正在使用的环境变量，导致导致第一个程序崩溃。 命名空间和 cgroup 手段提供隔离措施，可以避免冲突的发生。 容器名称 启动同一个镜像的多个容器，容器名称可能会冲突。 不指定容器名称时，docker 会自动分配名称。 当然，每个容器有唯一的 ID，可以标识该容器，称为 CID。 因为，容器启动（docker run）和创建（docker create），都会返回 CID。 所以，CID 可以方便的用脚本处理，例如: #!/bin/sh $MAILER_CID=$(docker run -d dockerinaction/ch2_mailer) # 这里如果需要创建 1000 个 web + agent 的农场，只要写个 for 循环 $WEB_CID=$(docker run -d nginx:alpine) $AGENT_CID=$(docker run -d --link $MAILER_CID:insidemailer --link $WEB_CID:insideweb dockerinaction/ch2_agent) 或者，使用如下的快捷命令： docker stop $(docker ps -aq) # 停止所有容器 docker rm $(docker ps -aq) # 删除所有容器 建立与环境无关的系统 只读文件系统，容器不能更改它包含的文件，这样攻击者不能对容器造成破坏，使用 --read-only。 环境变量注入 存储卷 Docker 容器的四个状态 运行 已暂停 重新启动 已退出（包括：容器尚未启动） 软件分发（镜像的来源） Docker Hub（开源，免费） 私有镜像服务器（闭源） 从文件加载镜像 docker save -o myfile.tar busybox:latest，把镜像导出成本地文件，-o, output docker load -i myfile.tar，从本地文件载入镜像，-i, input 从其他来源下载 例如：docker pull quay.io/dockerination/ch3_hello_registry:latest 需要在镜像的名称前面加上服务器的地址 使用 Dockerfile 构建镜像 Dockerfile 一般通过 GitHub 分发 Dockerfile 是描述镜像构建步骤的脚本 docker build . -t hello-docker:latest --rm=true Docker 网络 容器有以下四种网络模型，提供不同的隔离程度，容器的网络模型只属于其中之一： closed，没有网络，完全隔离，容器内不能访问互联网。容器外不能通过网络访问容器内。使用参数 --net none 创建。应用场景：运行 node.js 命令行程序的容器。 bridged，桥接，默认的网络模型。每个容器拥有一个本地回环接口（127.0.0.1）和一个单独的以太网接口（172.17.xxx.xxx），这个以太网接口跟主机的 172.17.xxx.1 接口连接。容器内可以访问外部网络，外部可以访问容器内网络。 joined。如果需要在不同容器上的程序通过本地回环接口进行通信时，使用 joined 容器。joined 容器之间共享一个网络栈，容器之间没有网络隔离。使用参数 --net container:。 opened，没有网络隔离，容器在宿主的网络中。没有单独的 IP 地址。容器中的服务程序，直接跑在主机的网络环境中。使用参数 --net host 创建。应用场景：云主机上的 nginx 反向代理容器。 上面四种网络模型的隔离程度，从上到下，隔离程度逐次降低。 Docker Compose Docker Compose 是一个用于定义、启动和管理服务的工具。 在 YAML 文件中定义了服务和服务系统，并通过命令行 docker-compose 进行管理。 Docker Compse 是描述完整的环境以及服务组件的交互。 一个 Compose 文件可能会描述四到五个独立的服务，它们之间是相关关联的，应保持隔离和独立的伸缩。 Docker 安装 Docker 分两个版本，docker-ce(Community Edition) 和 docker-ee(Enterprise Edition)。CE 版本是免费的、社区版。 具体安装步骤，参考 Docker 官方文档：https://docs.docker.com/engine/install/centos/ sudo yum install -y yum-utils sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo sudo yum install docker-ce docker-ce-cli containerd.io sudo yum list docker-ce --showduplicates | sort -r sudo systemctl start docker sudo systemctl status docker sudo systemctl enable docker docker version Docker 配置 # 以非 root 用户身份使用 docker sudo usermod -aG docker $USER # $USER 是当前登录的用户 # 此命令执行后，需注销，重新登录，才生效 # 使用国内 docker 镜像，提高镜像拉取速度 mkdir -p /etc/docker tee /etc/docker/daemon.json Docker 使用（常用操作） # 查看本机镜像 docker images # 删除镜像 docker rmi ubuntu # 运行交互式容器 docker run -it --name c1 centos /bin/bash # 运行守护式容器 docker run -d --name c2 centos # 查看容器运行的日志 docker logs c1 # 重启容器 docker restart c2 # 停止容器 docker stop c1 # 删除容器，前提容器不能是运行状态 docker rm c2 docker rm `docker ps -a -l` # 模板字符串的引号里面可以是其他命令 docker rm $(docker ps -a -l) # 跟上面的操作等价 # 在容器中执行命令 docker exec -it c1 /bin/bash docker exec -it c2 /bin/bash # 检查容器详细信息 docker inspect c2 # 修改容器的名称 docker rename old-name new-name # 容器和宿主机之间的文件复制 # src 是源，dst 是目的地 # 容器中的内容，容器名称:文件路径或文件夹路径，例如，c2:/src/a.txt # dst 一般是文件夹路径 docker cp src dst # 创建容器，但不运行 docker create centos # 查看运行的容器 docker ps # 删除所有容器，前提是这些容器已经暂停运行 docker rm $(docker ps -aq) docker ps -a | awk 'NR>1 {print $1}' | xargs docker rm # 目录挂载，注意宿主目录和容器目录必须是绝对路径 docker -d --name c2 -v 宿主机目录:容器目录 镜像名字 # 检查容器元数据，检查容器是否运行 docker inspect --format \"{{.State.Running}}\" c1 docker inspect -f \"{{.State.Running}}\" c1 # 常用参数 --link 容器名字：别名 链接到某个容器，解决主机名到 IP 地址映射的问题 链接时静态的，不传递的 链接目标的容器必须先启动 新容器中会创建环境变量来保存目标容器的名称和 IP Addr --rm 运行完容器后，自动删除容器 -e 环境变量=值 设置容器的环境变量，-e = --env --pid host 没有 PID 隔离的容器（一般不这样做） --cidfile 容器名称文件 把容器的 ID，保存到容器名称文件中，应该给出绝对路径 docker ps -l -q 返回最后创建容器的截断的 ID -l = --latest -q = --quiet docker ps --no-trunc 返回 -f = --format -v = --volume -p 宿主端口:容器端口 把容器端口映射到主机端口 -p -p : -p :: --read-only 只读文件系统 --restart # 搜索镜像，一般回到 Docker Hub 网站搜索 docker search tomcat # 拉取 centos 镜像，本操作可以跳过，可以直接启动镜像 # 当本地没有要启动的镜像时，会自动拉取 docker pull centos Docker 空间清理 # 查看磁盘空间占用，包括：镜像、容器、卷和缓存 docker system df -v # 清理 docker system prune # 深度清理 docker system prune -a # 清理无用的卷 docker volume rm $(docker volume ls -qf dangling=true) 创建镜像 # 构建镜像 docker build -t 镜像的名字 --rm=true . # --rm=true 删除中间镜像 # . 表示用当前目录的 Dockerfile 来创建镜像 # Dockerile 基于 DSL（Domain Specific Language） 语法 # 设置镜像 tag docker tag # 登录镜像仓库网站 docker login # 推送镜像 docker push 容器管理 # 安装 Docker Compose sudo curl -L \"https://github.com/docker/compose/releases/download/1.28.2/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose # 添加运行权限 sudo chmod +x /usr/local/bin/docker-compose # 检查是否安装成功 docker-compose --version # 使用 Docker Compose # 例如，bitnami redmine: https://hub.docker.com/r/bitnami/redmine 快速上手：nginx + 静态站 操作如下： 以下所有操作在 CentOS 7 控制台下完成。 安装 Docker，参考下面的文档。如已安装 Docker，跳过此步。 配置 Docker 环境，参考下面的文档。包括：非 root 用户使用 Docker，以及 Docker 阿里镜像。如已配置，跳过此步。 创建 hello-docker 目录，并进入该目录。运行命令：mkdir hello-docker && cd hello-docker 创建 index.html 文件，内容为 hello world。运行命令：echo \"hello world\" > index.html 创建 Dockerfile 文件，文件内容如下。FROM nginx:alpine COPY ./index.html /usr/share/nginx/html/index.html EXPOSE 80 打包镜像。运行命令：docker build . -t hello-docker:1.0.0 --rm=true 查看镜像。运行命令：docker images 运行容器。运行命令：docker run -d --name hello -p 8080:80 hello-docker:1.0.0 查看容器。运行命令：docker ps 访问静态站。运行命令：curl http://localhost:8080 注意： linux 上 8080 端口不要占用 linux 上 8080 端口防火墙打开，可以通过浏览器来访问：http://:8080 如果网站静态资源都在 ./dist 目录下，则 Dockerfile 的内容如下：FROM nginx:alpine COPY ./dist/ /usr/share/nginx/html/ EXPOSE 80 镜像瘦身 瘦身技巧 1：用 alpine 版本的镜像alpine 是一个常用的 Docker 基础镜像。Alpine 操作系统是一个面向安全的轻型 Linux 发行版。它不同于通常 Linux 发行版，Alpine 采用了 musl libc 和 busybox 以减小系统的体积和运行时资源消耗，但功能上比 busybox 又完善的多，因此得到开源社区越来越多的青睐。 瘦身技巧 2：合并指令一个Docker 镜像的尺寸是每一个独立镜像层的尺寸之和，这也就是联合文件系统的工作机制。这里并不存在“负”的镜像层尺寸。于是，Dockerfile 中每一个指令要么保持镜像尺寸不变，要么增加它的尺寸。同时，每一步还会引入新的元数据信息，使得整体尺寸在增大。为了降低整个镜像的尺寸，清除操作应该在同一镜像层中执行。于是，解决方案是将先前的多条指令合并成一条。当Docker 使用/bin/sh 来执行每一条指令时，我们可以使用Bourne shell 提供的&&操作符来实现链接。 例如： FROM debian:jessie RUN echo deb http://httpredir.debian.org/debian\\ jessie-backports main\\ > /ect/apt/sources.list.d/jessie-backports.list RUN apt-get update && \\ apt-get --no-install-recommends \\ install -y opendjdk-8-jre-headless && \\ rm -rfv /var/lib/apt/lists/* 常用软件 apline，最轻量的 linux 基础镜像。 MySQL，关系数据库，见 docker-demo 仓库的 05-mysql 分支 nginx，静态 web 服务，见 docker-demo 仓库的 01-nginx 分支 gogs，类似 github 的 git web 服务，见 docker-demo 仓库的 09-git 分支 dozzle，查看 docker 容器日志的 web 服务，见 docker-demo 仓库的 08-log 分支 nodejs，Node.js 运行环境，见 docker-demo 仓库的 03-node 分支 redmine，项目管理平台，见 docker-demo 仓库的 10-redmine 分支 wordpress，博客网站或企业网站，见 docker-demo 仓库的 1 gcc，C 语言编译器及运行环境，见 docker-demo 仓库的 11-gcc 分支 其他 # 搭建私有镜像仓库 docker run -d -p 5000:5000 --restart=always --name registry \\ -v /home/wangding:/var/lib/registry registry:latest docker tag hello-world:latest localhost:5000/hello-world:1.0.0 docker push localhost:5000/hello-world:1.0.0 # 通过浏览器查看仓库信息 http://192.168.133.144:5000/v2/hello-world/tags/list # 通过磁盘文件查看仓库信息 ls /home/wangding/docker 2017 -  by 王顶. All rights reserved.本站访客人数  人次document.getElementsByClassName(\"bsz-this-year\")[0].innerHTML = new Date().getFullYear(); window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"5f2010891d3a1e43daad\",\"clientSecret\":\"0f1589253938ab880568105760d6cdbd07da96a6\",\"repo\":\"note\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"note\"],\"id\":\"/linux/docker.html\"});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"5f2010891d3a1e43daad\",\"clientSecret\":\"0f1589253938ab880568105760d6cdbd07da96a6\",\"repo\":\"note\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"note\"],\"id\":\"/linux/docker.html\"});gitalk.render(\"gitalk-container\"); "},"linux/aliyun.html":{"url":"linux/aliyun.html","title":"aliyun","keywords":"","body":"阿里云服务器操作 重新初始化系统盘 登录ECS管理控制台。 在左侧导航栏，单击实例与镜像 > 实例。 在顶部菜单栏左上角处，选择地域。 找到需要重新初始化系统盘的实例，单击实例 ID 进入实例详情页。 在左侧导航栏中，单击本实例云盘。 找到系统盘，在操作列中，单击重新初始化磁盘。 初始化操作的之前，要暂停实例，实例处于停止状态 在弹出的重新初始化云盘对话框里，配置重新初始化参数。 参数说明 Linux实例：选择设置密钥或设置密码。 设置密钥：实例绑定 SSH 密钥对。后续通过 SSH 密钥方式登录。 设置密码：重新设置密码。可以使用旧的密码，也可以指定新的密码。 安全加固选择免费开通，您的实例会自动免费加载云服务器安全组件，提供网站后门检测、异地登录提醒、暴力破解拦截等安全功能。 启动实例策略选择重置云盘后启动，完成重新初始化后，实例会自动启动。 单击确认重新初始化云盘。 添加 wangding 用户 # 用 root 账号，执行下列操作 # 添加 wangding 用户 useradd wangding # 把 wangding 加入到 root 组 gpasswd -a wangding root # 查看 wangding 账户，所在的组 groups wangding # 设置 wangding 账户的密码 passwd wangding # 把 wangding 放到 sudoers 组 chmod 777 /etc/sudoers vi /etc/sudoers # wangding ALL ALL chmod 440 /etc/sudoers 安装 nginx # 安装依赖 sudo yum install -y pcre pcre-devel zlib zlib-devel openssl openssl-devel # 下载 nginx 安装包 wget http://nginx.org/download/nginx-1.9.9.tar.gz # 把压缩包解压 tar -zxvf nginx-1.9.9.tar.gz # 切换到 nginx 目录下 cd nginx-1.9.9 # 编译并安装 ./configure make sudo make install # 切换到 /usr/local/nginx 安装目录 cd /usr/local/nginx # 编辑 nginx 的配置文件 nginx.conf 文件，默认不用编辑 vi conf/nginx.conf location / { proxy_pass http://localhost:3000; proxy_set_header Host redmine.wangding.co; proxy_set_header X-Real-IP 39.104.115.100; } # 启动 nginx sudo sbin/nginx # 检查 nginx 是否启动 ps -ef |grep nginx # 用浏览器访问阿里服务器的公共 IP # 应该能看到 nginx 的默认页面 2017 -  by 王顶. All rights reserved.本站访客人数  人次document.getElementsByClassName(\"bsz-this-year\")[0].innerHTML = new Date().getFullYear(); window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"5f2010891d3a1e43daad\",\"clientSecret\":\"0f1589253938ab880568105760d6cdbd07da96a6\",\"repo\":\"note\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"note\"],\"id\":\"/linux/aliyun.html\"});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"5f2010891d3a1e43daad\",\"clientSecret\":\"0f1589253938ab880568105760d6cdbd07da96a6\",\"repo\":\"note\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"note\"],\"id\":\"/linux/aliyun.html\"});gitalk.render(\"gitalk-container\"); "},"linux/nginx.html":{"url":"linux/nginx.html","title":"nginx","keywords":"","body":"nginx 常用命令 快速停止或关闭 nginx，nginx -s stop 正常停止或关闭 nginx，nginx -s quit 配置文件修改重装载命令，nginx -s reload 2017 -  by 王顶. All rights reserved.本站访客人数  人次document.getElementsByClassName(\"bsz-this-year\")[0].innerHTML = new Date().getFullYear(); window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"5f2010891d3a1e43daad\",\"clientSecret\":\"0f1589253938ab880568105760d6cdbd07da96a6\",\"repo\":\"note\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"note\"],\"id\":\"/linux/nginx.html\"});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"5f2010891d3a1e43daad\",\"clientSecret\":\"0f1589253938ab880568105760d6cdbd07da96a6\",\"repo\":\"note\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"note\"],\"id\":\"/linux/nginx.html\"});gitalk.render(\"gitalk-container\"); "},"linux/gitlab.html":{"url":"linux/gitlab.html","title":"GitLab","keywords":"","body":"GitLab 资料 官方文档：https://docs.gitlab.com/ce/README.html 安装 安装步骤见官网文档：https://about.gitlab.com/downloads/#centos7 访问 把主机的 IP 地址输入地址栏就可以打开 GitLab 网站的页面，第一次需要输入 root 用户的密码，然后注册用户，创建项目，一切跟 GitHub 玩法类似。没有什么难度。 2017 -  by 王顶. All rights reserved.本站访客人数  人次document.getElementsByClassName(\"bsz-this-year\")[0].innerHTML = new Date().getFullYear(); window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"5f2010891d3a1e43daad\",\"clientSecret\":\"0f1589253938ab880568105760d6cdbd07da96a6\",\"repo\":\"note\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"note\"],\"id\":\"/linux/gitlab.html\"});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"5f2010891d3a1e43daad\",\"clientSecret\":\"0f1589253938ab880568105760d6cdbd07da96a6\",\"repo\":\"note\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"note\"],\"id\":\"/linux/gitlab.html\"});gitalk.render(\"gitalk-container\"); "},"linux/ruby.html":{"url":"linux/ruby.html","title":"Ruby","keywords":"","body":"安装 ruby 用 ruby-install 来安装 ruby。用 root 用户登录 linux，假设 linux 是 CentOS 最小系统。 安装必要工具 yum install -y wget bzip2 安装 ruby-install wget -O ruby-install-0.6.1.tar.gz https://github.com/postmodern/ruby-install/archive/v0.6.1.tar.gz tar -xzvf ruby-install-0.6.1.tar.gz cd ruby-install-0.6.1/ make install 安装 ruby 安装最新的 ruby 稳定版 ruby-insatll --system ruby ruby -v 2017 -  by 王顶. All rights reserved.本站访客人数  人次document.getElementsByClassName(\"bsz-this-year\")[0].innerHTML = new Date().getFullYear(); window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"5f2010891d3a1e43daad\",\"clientSecret\":\"0f1589253938ab880568105760d6cdbd07da96a6\",\"repo\":\"note\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"note\"],\"id\":\"/linux/ruby.html\"});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"5f2010891d3a1e43daad\",\"clientSecret\":\"0f1589253938ab880568105760d6cdbd07da96a6\",\"repo\":\"note\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"note\"],\"id\":\"/linux/ruby.html\"});gitalk.render(\"gitalk-container\"); "},"linux/alpine.html":{"url":"linux/alpine.html","title":"alpine","keywords":"","body":"alpine 查看 alpine 的版本，cat /etc/alpine-release 2017 -  by 王顶. All rights reserved.本站访客人数  人次document.getElementsByClassName(\"bsz-this-year\")[0].innerHTML = new Date().getFullYear(); window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"5f2010891d3a1e43daad\",\"clientSecret\":\"0f1589253938ab880568105760d6cdbd07da96a6\",\"repo\":\"note\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"note\"],\"id\":\"/linux/alpine.html\"});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"5f2010891d3a1e43daad\",\"clientSecret\":\"0f1589253938ab880568105760d6cdbd07da96a6\",\"repo\":\"note\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"note\"],\"id\":\"/linux/alpine.html\"});gitalk.render(\"gitalk-container\"); "},"testing/jmeter.html":{"url":"testing/jmeter.html","title":"JMeter","keywords":"","body":"JMeter 大牛的 JMeter 41 篇博客文章http://blog.csdn.net/sd4015700/article/category/2733803 JMeter 使用总结http://www.soso.io/article/60.html http://www.guru99.com/jmeter-tutorials.html http://www.ibm.com/developerworks/cn/opensource/os-pressiontest/#icomments http://www.spasvo.com/ceshi/open/kyxncsgj/Jmeter/2016113134318.html 视频课程 http://www.imooc.com/learn/735 http://www.imooc.com/learn/278 JMeter 官网 http://jmeter.apache.org/ 2017 -  by 王顶. All rights reserved.本站访客人数  人次document.getElementsByClassName(\"bsz-this-year\")[0].innerHTML = new Date().getFullYear(); window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"5f2010891d3a1e43daad\",\"clientSecret\":\"0f1589253938ab880568105760d6cdbd07da96a6\",\"repo\":\"note\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"note\"],\"id\":\"/testing/jmeter.html\"});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"5f2010891d3a1e43daad\",\"clientSecret\":\"0f1589253938ab880568105760d6cdbd07da96a6\",\"repo\":\"note\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"note\"],\"id\":\"/testing/jmeter.html\"});gitalk.render(\"gitalk-container\"); "},"testing/selenium-ide.html":{"url":"testing/selenium-ide.html","title":"SeleniumIDE","keywords":"","body":"Selenium Selenium IDE 相关的资料 测试策略：https://newcircle.com/bookshelf/selenium_tutorial/testing_strategies 一个高手的博客：https://maryannmp.wordpress.com/ 关于 Selenium IDE 的文章：https://maryannmp.wordpress.com/tag/selenium-ide/ Selenium 插件集：https://addons.mozilla.org/zh-CN/firefox/collections/Paul79/se/ Selenium 相关技巧：http://elementalselenium.com/ waitForXXX 和 XXXandWait 命令 https://www.infoq.com/articles/testing-ajax-selenium 这个文章讲的比较透彻。 策略方面的资料 虽然陈旧，但是还是比较系统的 http://www.seleniumhq.org/docs/06_test_design_considerations.jsp# 命令行启动 Selenium IDE 和脚本 http://stackoverflow.com/questions/1144744/how-do-i-launch-the-selenium-ide-from-the-command-line-with-a-specific-test-case setTimeOut 命令，在脚本开头设置超时值 Selenium IDE 支持 文件日志 https://www.youtube.com/watch?v=-YRYiKBVWV4&index=12&list=PLt22YOtJv-IdiM4swsWc29MR-Cfj9hYKW Selenium IDE 支持 for 循环，有待验证 如何在远程服务器上运行测试案例？ ？研究一下啊 2017 -  by 王顶. All rights reserved.本站访客人数  人次document.getElementsByClassName(\"bsz-this-year\")[0].innerHTML = new Date().getFullYear(); window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"5f2010891d3a1e43daad\",\"clientSecret\":\"0f1589253938ab880568105760d6cdbd07da96a6\",\"repo\":\"note\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"note\"],\"id\":\"/testing/selenium-ide.html\"});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"5f2010891d3a1e43daad\",\"clientSecret\":\"0f1589253938ab880568105760d6cdbd07da96a6\",\"repo\":\"note\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"note\"],\"id\":\"/testing/selenium-ide.html\"});gitalk.render(\"gitalk-container\"); "},"testing/webdriver.html":{"url":"testing/webdriver.html","title":"WebDriver","keywords":"","body":"WebDriver 参考资料 官方API文档：http://seleniumhq.github.io/selenium/docs/api/javascript/index.html 阮一峰的文章：https://github.com/ruanyf/jstutorial/blob/63812f4c73e33916406cea2d19b01066960c46f5/tool/testing.md 课程视频 https://www.youtube.com/watch?v=X3pTXG9a1oQ https://www.youtube.com/playlist?list=PLDcL8dhuVQJzgNMCXtlEe8QeDIEByxBFX Selenium webdriver 环境搭建 # 安装 node.js 略 # 验证 node.js 和 npm 安装成功 node -v npm -v # 安装 Selenium webdriver node install selenium-webdriver # 安装火狐浏览器驱动略 # https://developer.mozilla.org/en-US/docs/Mozilla/QA/Marionette/WebDriver # 下载地址： # https://github.com/mozilla/geckodriver/releases # IDE 环境用 webstorm，安装略 2017 -  by 王顶. All rights reserved.本站访客人数  人次document.getElementsByClassName(\"bsz-this-year\")[0].innerHTML = new Date().getFullYear(); window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"5f2010891d3a1e43daad\",\"clientSecret\":\"0f1589253938ab880568105760d6cdbd07da96a6\",\"repo\":\"note\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"note\"],\"id\":\"/testing/webdriver.html\"});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"5f2010891d3a1e43daad\",\"clientSecret\":\"0f1589253938ab880568105760d6cdbd07da96a6\",\"repo\":\"note\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"note\"],\"id\":\"/testing/webdriver.html\"});gitalk.render(\"gitalk-container\"); "},"database/mariadb.html":{"url":"database/mariadb.html","title":"MariaDB","keywords":"","body":"mariadb 安装 MariaDB su yum install -y mariadb mariadb-server systemctl start mariadb 配置 MariaDB mysql_secure_installation 访问 MariaDB su mysql -p -p 参数会提示输入密码，输入密码后，就可以访问数据库了。 2017 -  by 王顶. All rights reserved.本站访客人数  人次document.getElementsByClassName(\"bsz-this-year\")[0].innerHTML = new Date().getFullYear(); window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"5f2010891d3a1e43daad\",\"clientSecret\":\"0f1589253938ab880568105760d6cdbd07da96a6\",\"repo\":\"note\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"note\"],\"id\":\"/database/mariadb.html\"});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"5f2010891d3a1e43daad\",\"clientSecret\":\"0f1589253938ab880568105760d6cdbd07da96a6\",\"repo\":\"note\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"note\"],\"id\":\"/database/mariadb.html\"});gitalk.render(\"gitalk-container\"); "},"database/mongodb.html":{"url":"database/mongodb.html","title":"MongoDB","keywords":"","body":"mongoDB mongodb server 安装 docker 方式安装 mongodb。 touch docker-compose.yml vi docker-compose.yml version: '3.7' services: mongodb-primary: container_name: mongodb image: 'bitnami/mongodb:latest' restart: always network_mode: \"host\" environment: - MONGODB_ROOT_PASSWORD=123 docker-compose up -d docker ps -a 使用 docker 中的 mongosh 不需要本地安装 mogodbsh，直接使用 docker 中的 mongosh。 docker run -it --rm --network host bitnami/mongodb:latest mongosh 上面的命令太长，可以用 alias 定义别名。 alias mg='docker run -it --rm --network host bitnami/mongodb:latest mongosh' mg -u root -p 本地安装 mongosh sudo touch /etc/yum.repos.d/mongodb.repo sudo vi /etc/yum.repos.d/mongodb.repo [mongodb-org-6.0] name=MongoDB Repository baseurl=https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/6.0/$basearch/ gpgcheck=1 enabled=1 gpgkey=https://www.mongodb.org/static/pgp/server-6.0.asc sudo yum install mongodb-mongosh -y mongosh --version 验证 mongodb 是否正常工作 mongosh -u root -p 123 help // 查看 MongoDB 的帮助信息 db.help() // 查看数据库的帮助信息 db.version() // 查看 MongoDB 的版本号 show dbs // 查看有多少个数据库 use todo // 使用 todo 库作为当前的数据库 db // 查看当前的数据库 exit // 退出 MongoDB 系统 DDL use demo // 建库，如果 demo 库不存在会创建 db.createCollection('areas') // 创建 areas 表 show collections db.areas.drop() // 删除集合 db.dropDatabase() // 删除当前的数据库 DML // 向 areas 表插入一条记录 db.areas.insert({'area_name': '日韩'}) db.areas.insert({'area_name': '欧美'}) // 查看 areas 表的所有记录 db.areas.find() // 查看 areas 表中的特定记录 db.areas.find({'area_name': '日韩'}) // 查看 areas 表中的记录数量 db.areas.countDocuments() // 对 areas 表排序，trade_date 是表中需要排序的字段，相当于 order by trade_date // 1 代表升序，-1 代表降序 db.areas.find().sort({ 'trade_date': 1}) db.areas.find().sort({ 'trade_date': 1}).limit(10) // 查看前 10 条数据 db.areas.find({}, {trade_date: 1, open: 1, close: 1}) // 只查看表中的三个字段 db.areas.findOne(); // 返回符合查询条件的第一条记录 // 删除 areas 表中符合条件的记录 db.areas.deleteMany({}) // 将旧文档换成新文档 db.areas.update(old, new) DCL 略 执行脚本 mongosh -u root -p -f a.js mongodb 数据库编程操作 npm i -D mongodb #!/usr/bin/env node const { MongoClient } = require('mongodb'); const log = console.log, dbName = 'test', table = 'log', dbURL = 'mongodb://root:123@localhost:27017/?authMechanism=DEFAULT'; const client = new MongoClient(dbURL); async function main() { await client.connect(); log('Connected successfully to server'); const db = client.db(dbName); const collection = db.collection(table); // modify data const arr = [2, 3]; await collection.updateMany( { \"logEvent\": { $in: arr}}, { $rename: {\"createAt\": \"createAtt\"}}); return 'done.'; } main() .then(console.log) .catch(console.error) .finally(() => client.close()); 2017 -  by 王顶. All rights reserved.本站访客人数  人次document.getElementsByClassName(\"bsz-this-year\")[0].innerHTML = new Date().getFullYear(); window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"5f2010891d3a1e43daad\",\"clientSecret\":\"0f1589253938ab880568105760d6cdbd07da96a6\",\"repo\":\"note\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"note\"],\"id\":\"/database/mongodb.html\"});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"5f2010891d3a1e43daad\",\"clientSecret\":\"0f1589253938ab880568105760d6cdbd07da96a6\",\"repo\":\"note\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"note\"],\"id\":\"/database/mongodb.html\"});gitalk.render(\"gitalk-container\"); "},"other.html":{"url":"other.html","title":"杂物间","keywords":"","body":"乱七八糟 博客 为什么这么设计：https://draveness.me/whys-the-design/ 陌溪的学习笔记：http://moxi159753.gitee.io/learningnotes/ 周陆军博客：https://www.zhoulujun.cn/ linux 进程间通信 六种方式方式，参考：https://blog.csdn.net/qq_34827674/article/details/107678226 管道 消息队列 共享内存 信号量 信号 socket，参考：https://zhuanlan.zhihu.com/p/234806787 Software Architecture Patterns https://orkhanscience.medium.com/software-architecture-patterns-5-mins-read-e9e3c8eb47d2 四本开源的软件架构的电子书：http://aosabook.org/en/index.html 系统设计：https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md 元宇宙 根据照片生成 avatr(3D 模型): https://readyplayer.me/ 加密 SHA-1 碰撞：https://www.zhihu.com/question/56234281/answer/148349930 人工智能 简笔画识别应用：https://quickdraw.withgoogle.com 物体识别应用：https://pjreddie.com/darknet/yolo/ 图片混合应用：https://deepdreamgenerator.com ML 平台：https://studio.azureml.net 数据集：https://archive.ics.uci.edu/ml 神经网络案例演示：https://playground.tensorflow.org/ Kaggle如何入门：https://www.zhihu.com/question/23987009/answer/285179721 系统开发层面 openresty 邮件列表https://groups.google.com/forum/#!forum/openresty openresty 官网http://openresty.org/cn/ openresty 博客http://blog.sina.com.cn/openresty openresty 电子书https://www.gitbook.com/book/moonbingbing/openresty-best-practices/details 动态跟踪技术http://openresty.org/posts/dynamic-tracing/ 2017 -  by 王顶. All rights reserved.本站访客人数  人次document.getElementsByClassName(\"bsz-this-year\")[0].innerHTML = new Date().getFullYear(); window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"5f2010891d3a1e43daad\",\"clientSecret\":\"0f1589253938ab880568105760d6cdbd07da96a6\",\"repo\":\"note\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"note\"],\"id\":\"/other.html\"});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"5f2010891d3a1e43daad\",\"clientSecret\":\"0f1589253938ab880568105760d6cdbd07da96a6\",\"repo\":\"note\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"note\"],\"id\":\"/other.html\"});gitalk.render(\"gitalk-container\"); "}}